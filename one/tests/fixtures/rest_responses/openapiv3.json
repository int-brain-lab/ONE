{
 "openapi": "3.0.3",
 "info": {
  "title": "",
  "version": "0.0.0"
 },
 "paths": {
  "/api/schema": {
   "get": {
    "operationId": "api_schema_retrieve",
    "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
    "parameters": [
     {
      "in": "query",
      "name": "format",
      "schema": {
       "type": "string",
       "enum": [
        "json",
        "yaml"
       ]
      }
     }
    ],
    "tags": [
     "api"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     },
     {}
    ],
    "responses": {
     "200": {
      "content": {
       "application/vnd.oai.openapi": {
        "schema": {
         "type": "object",
         "additionalProperties": {}
        }
       },
       "application/yaml": {
        "schema": {
         "type": "object",
         "additionalProperties": {}
        }
       },
       "application/vnd.oai.openapi+json": {
        "schema": {
         "type": "object",
         "additionalProperties": {}
        }
       },
       "application/json": {
        "schema": {
         "type": "object",
         "additionalProperties": {}
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/auth-token": {
   "post": {
    "operationId": "auth_token_create",
    "tags": [
     "auth-token"
    ],
    "requestBody": {
     "content": {
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/AuthToken"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/AuthToken"
       }
      },
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/AuthToken"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AuthToken"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/brain-regions": {
   "get": {
    "operationId": "brain_regions_list",
    "description": "get: **FILTERS**\n\n-   **id**: Allen primary key: `/brain-regions?id=687`\n-   **acronym**: iexact on acronym `/brain-regions?acronym=RSPv5`\n-   **name**: icontains on name `/brain-regions?name=retrosplenial`\n-   **description**: icontains on description `/brain-regions?description=RSPv5`\n-   **parent**: get child nodes `/brain-regions?parent=315`\n-   **ancestors**: get all ancestors for a given ID\n-   **descendants**: get all descendants for a given ID\n\n[===> brain region model reference](/admin/doc/models/experiments.brainregion)",
    "parameters": [
     {
      "in": "query",
      "name": "acronym",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "ancestors",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "descendants",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "description",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "parent",
      "schema": {
       "type": "integer",
       "maximum": 2147483647,
       "minimum": -2147483648
      }
     }
    ],
    "tags": [
     "brain-regions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedBrainRegionList"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/brain-regions/{id}": {
   "get": {
    "operationId": "brain_regions_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "integer"
      },
      "required": true
     }
    ],
    "tags": [
     "brain-regions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/BrainRegion"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "brain_regions_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "integer"
      },
      "required": true
     }
    ],
    "tags": [
     "brain-regions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/BrainRegion"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/BrainRegion"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/BrainRegion"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/BrainRegion"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "brain_regions_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "integer"
      },
      "required": true
     }
    ],
    "tags": [
     "brain-regions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedBrainRegion"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedBrainRegion"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedBrainRegion"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/BrainRegion"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/cache.zip": {
   "get": {
    "operationId": "cache.zip_retrieve",
    "tags": [
     "cache.zip"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "description": "No response body"
     }
    }
   }
  },
  "/cache/info/": {
   "get": {
    "operationId": "cache_info_retrieve",
    "tags": [
     "cache"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "description": "No response body"
     }
    }
   }
  },
  "/channels": {
   "get": {
    "operationId": "channels_list",
    "description": "get: **FILTERS**\n\n-   **subject**: subject nickname: `/channels?subject=Algernon`\n-   **session**: UUID `/channels?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **lab**: lab name `/channels?lab=wittenlab`\n-   **probe_insertion**: UUID  `/channels?probe_insertion=aad23144-0e52-4eac-80c5-c4ee2decb198`\n\n[===> channel model reference](/admin/doc/models/experiments.channel)",
    "parameters": [
     {
      "in": "query",
      "name": "axial",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "brain_region",
      "schema": {
       "type": "integer",
       "maximum": 2147483647,
       "minimum": -2147483648
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "lateral",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "probe_insertion",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "session",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "subject",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "trajectory_estimate",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "x",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "y",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "z",
      "schema": {
       "type": "number",
       "format": "float"
      }
     }
    ],
    "tags": [
     "channels"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedChannelList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "channels_create",
    "description": "get: **FILTERS**\n\n-   **subject**: subject nickname: `/channels?subject=Algernon`\n-   **session**: UUID `/channels?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **lab**: lab name `/channels?lab=wittenlab`\n-   **probe_insertion**: UUID  `/channels?probe_insertion=aad23144-0e52-4eac-80c5-c4ee2decb198`\n\n[===> channel model reference](/admin/doc/models/experiments.channel)",
    "tags": [
     "channels"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Channel"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Channel"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Channel"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Channel"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/channels/{id}": {
   "get": {
    "operationId": "channels_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "channels"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Channel"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "channels_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "channels"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Channel"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Channel"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Channel"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Channel"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "channels_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "channels"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedChannel"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedChannel"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedChannel"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Channel"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "channels_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "channels"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/check-protected": {
   "get": {
    "operationId": "check_protected_list",
    "description": "Endpoint to check if set of files are protected or not\n\nThe session is retrieved by the ALF convention in the relative path, so this field has to\nmatch the format Subject/Date/Number as shown below.\n\nThe client side REST query should look like this:\n\n```python\nr_ = {'created_by': 'user_name_alyx',\n      'path': 'ZM_1085/2019-02-12/002/alf',  # relative path to repo path\n      'filenames': ['file1', 'file2'],\n      }\n```\n\nReturns a response indicating if any of the datasets are protected or not\n-   Status 403 if a dataset is protected, details contains a list of protected datasets\n-   Status 200 is none of the datasets are protected",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "check-protected"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     },
     {}
    ],
    "responses": {
     "200": {
      "description": "No response body"
     }
    }
   }
  },
  "/chronic-insertions": {
   "get": {
    "operationId": "chronic_insertions_list",
    "description": "get: **FILTERS**\n\n-   **name**: chronic insertion name `/chronic-insertions?name=probe00`\n-   **subject**: subject nickname: `/chronic-insertions?subject=Algernon`\n-   **lab**: lab name `/chronic-insertions?lab=UCLA`\n-   **model**: probe model name `/insertions?model=3A`\n-   **probe**: probe UUID\n`/chronic-insertions?probe=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **session**: session UUID\n`/chronic-insertions?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **serial**: serial no. of probe `/chronic-insertions?serial=101010`\n-   **atlas_name**: returns a session if any channel name icontains\n the value: `/chronic-insertions?brain_region=visual cortex`\n-   **atlas_acronym**: returns a session if any of its channels name exactly\n matches the value `/chronic-insertions?atlas_acronym=SSp-m4`, cf Allen CCFv2017\n-   **atlas_id**: returns a session if any of its channels id matches the\n provided value: `/chronic-insertions?atlas_id=950`, cf Allen CCFv2017\n\n[===> chronic insertion model reference](/admin/doc/models/experiments.chronicinsertion)",
    "parameters": [
     {
      "in": "query",
      "name": "atlas_acronym",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "atlas_id",
      "schema": {
       "type": "number"
      }
     },
     {
      "in": "query",
      "name": "atlas_name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "end_time",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "location",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "model",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "narrative",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "probe",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "procedures",
      "schema": {
       "type": "array",
       "items": {
        "type": "string",
        "format": "uuid"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "serial",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "session",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "start_time",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "subject",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "users",
      "schema": {
       "type": "array",
       "items": {
        "type": "string",
        "format": "uuid"
       }
      },
      "explode": true,
      "style": "form"
     }
    ],
    "tags": [
     "chronic-insertions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedChronicInsertionListList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "chronic_insertions_create",
    "description": "get: **FILTERS**\n\n-   **name**: chronic insertion name `/chronic-insertions?name=probe00`\n-   **subject**: subject nickname: `/chronic-insertions?subject=Algernon`\n-   **lab**: lab name `/chronic-insertions?lab=UCLA`\n-   **model**: probe model name `/insertions?model=3A`\n-   **probe**: probe UUID\n`/chronic-insertions?probe=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **session**: session UUID\n`/chronic-insertions?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **serial**: serial no. of probe `/chronic-insertions?serial=101010`\n-   **atlas_name**: returns a session if any channel name icontains\n the value: `/chronic-insertions?brain_region=visual cortex`\n-   **atlas_acronym**: returns a session if any of its channels name exactly\n matches the value `/chronic-insertions?atlas_acronym=SSp-m4`, cf Allen CCFv2017\n-   **atlas_id**: returns a session if any of its channels id matches the\n provided value: `/chronic-insertions?atlas_id=950`, cf Allen CCFv2017\n\n[===> chronic insertion model reference](/admin/doc/models/experiments.chronicinsertion)",
    "tags": [
     "chronic-insertions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/ChronicInsertionList"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/ChronicInsertionList"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/ChronicInsertionList"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ChronicInsertionList"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/chronic-insertions/{id}": {
   "get": {
    "operationId": "chronic_insertions_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "chronic-insertions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ChronicInsertionDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "chronic_insertions_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "chronic-insertions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/ChronicInsertionDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/ChronicInsertionDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/ChronicInsertionDetail"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ChronicInsertionDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "chronic_insertions_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "chronic-insertions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedChronicInsertionDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedChronicInsertionDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedChronicInsertionDetail"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ChronicInsertionDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "chronic_insertions_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "chronic-insertions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/data-formats": {
   "get": {
    "operationId": "data_formats_list",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "data-formats"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedDataFormatList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "data_formats_create",
    "tags": [
     "data-formats"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/DataFormat"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/DataFormat"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/DataFormat"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataFormat"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/data-formats/{name}": {
   "get": {
    "operationId": "data_formats_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-formats"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataFormat"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "data_formats_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-formats"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/DataFormat"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/DataFormat"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/DataFormat"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataFormat"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "data_formats_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-formats"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataFormat"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataFormat"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataFormat"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataFormat"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "data_formats_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-formats"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/data-repository": {
   "get": {
    "operationId": "data_repository_list",
    "parameters": [
     {
      "in": "query",
      "name": "globus_endpoint_id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "globus_is_personal",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "data-repository"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedDataRepositoryList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "data_repository_create",
    "tags": [
     "data-repository"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/DataRepository"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/DataRepository"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/DataRepository"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataRepository"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/data-repository-type": {
   "get": {
    "operationId": "data_repository_type_list",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "data-repository-type"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedDataRepositoryTypeList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "data_repository_type_create",
    "tags": [
     "data-repository-type"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/DataRepositoryType"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/DataRepositoryType"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/DataRepositoryType"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataRepositoryType"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/data-repository-type/{name}": {
   "get": {
    "operationId": "data_repository_type_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-repository-type"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataRepositoryType"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "data_repository_type_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-repository-type"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/DataRepositoryType"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/DataRepositoryType"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/DataRepositoryType"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataRepositoryType"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "data_repository_type_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-repository-type"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataRepositoryType"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataRepositoryType"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataRepositoryType"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataRepositoryType"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "data_repository_type_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-repository-type"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/data-repository/{name}": {
   "get": {
    "operationId": "data_repository_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-repository"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataRepository"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "data_repository_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-repository"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/DataRepository"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/DataRepository"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/DataRepository"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataRepository"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "data_repository_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-repository"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataRepository"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataRepository"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataRepository"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataRepository"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "data_repository_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "data-repository"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/dataset-types": {
   "get": {
    "operationId": "dataset_types_list",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "dataset-types"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedDatasetTypeList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "dataset_types_create",
    "tags": [
     "dataset-types"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/DatasetType"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/DatasetType"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/DatasetType"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DatasetType"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/dataset-types/{name}": {
   "get": {
    "operationId": "dataset_types_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "dataset-types"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DatasetType"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "dataset_types_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "dataset-types"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/DatasetType"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/DatasetType"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/DatasetType"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DatasetType"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "dataset_types_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "dataset-types"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDatasetType"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDatasetType"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDatasetType"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DatasetType"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "dataset_types_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "dataset-types"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/datasets": {
   "get": {
    "operationId": "datasets_list",
    "description": "get: **FILTERS**\n-   **subject**: subject nickname: `/datasets?subject=Algernon`\n-   **lab**: lab name `/datsets?lab=wittenlab`\n-   **created_date**: dataset registration date `/datasets?created_date=2020-02-16`\n-   **date**: session start time date `/datasets?date=2020-02-16`\n-   **created_by**: lab member creation `/datasets?created_by=root`\n-   **experiment_number**: session number  `/datasets?experiment_number=1`\n-   **created_date_gte**: greater/equal creation date  `/datasets?created_date_gte=2020-02-16`\n-   **created_date_lte**: lower/equal creation date  `/datasets?created_date_lte=2020-02-16`\n-   **exists**: only returns datasets for which a file record exists or doesn't exit on a\nserver repo (boolean)  `/datasets?exists=True`\n-   **probe_insertions**: probe insertion id '/datasets?probe_insertion=uuid\n-   **tag**: tag name '/datasets?tag=repeated_site\n-   **public**: only returns datasets that are public or not public\n-   **protected**: only returns datasets that are protected or not protected\n-   **qc**: only returns datasets with this QC value `/datasets?qc=PASS`\n\n[===> dataset model reference](/admin/doc/models/data.dataset)",
    "parameters": [
     {
      "in": "query",
      "name": "auto_datetime",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "collection",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "content_type",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "created_by",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "created_date",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "created_date_gte",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "created_date_lte",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "created_datetime",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "data_format",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "dataset_type",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "date",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "default_dataset",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "exists",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "experiment_number",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "file_size",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "generating_software",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "hash",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "md5",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "object_id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "probe_insertion",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "protected",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "provenance_directory",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "public",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "qc",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "revision",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "session",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "subject",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "tag",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "tags",
      "schema": {
       "type": "array",
       "items": {
        "type": "string",
        "format": "uuid"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "version",
      "schema": {
       "type": "string"
      }
     }
    ],
    "tags": [
     "datasets"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedDatasetList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "datasets_create",
    "description": "get: **FILTERS**\n-   **subject**: subject nickname: `/datasets?subject=Algernon`\n-   **lab**: lab name `/datsets?lab=wittenlab`\n-   **created_date**: dataset registration date `/datasets?created_date=2020-02-16`\n-   **date**: session start time date `/datasets?date=2020-02-16`\n-   **created_by**: lab member creation `/datasets?created_by=root`\n-   **experiment_number**: session number  `/datasets?experiment_number=1`\n-   **created_date_gte**: greater/equal creation date  `/datasets?created_date_gte=2020-02-16`\n-   **created_date_lte**: lower/equal creation date  `/datasets?created_date_lte=2020-02-16`\n-   **exists**: only returns datasets for which a file record exists or doesn't exit on a\nserver repo (boolean)  `/datasets?exists=True`\n-   **probe_insertions**: probe insertion id '/datasets?probe_insertion=uuid\n-   **tag**: tag name '/datasets?tag=repeated_site\n-   **public**: only returns datasets that are public or not public\n-   **protected**: only returns datasets that are protected or not protected\n-   **qc**: only returns datasets with this QC value `/datasets?qc=PASS`\n\n[===> dataset model reference](/admin/doc/models/data.dataset)",
    "tags": [
     "datasets"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Dataset"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Dataset"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Dataset"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Dataset"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/datasets/{id}": {
   "get": {
    "operationId": "datasets_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "datasets"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Dataset"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "datasets_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "datasets"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Dataset"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Dataset"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Dataset"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Dataset"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "datasets_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "datasets"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataset"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataset"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDataset"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Dataset"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "datasets_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "datasets"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/downloads": {
   "get": {
    "operationId": "downloads_list",
    "description": "get: **FILTERS**\n\n-   **user**: Labmember name: `/downloads?user=jimmyjazz`\n-   **json**: icontains on json: `/downloads?json=processing`\n-   **count**: count number: `/downloads?count=5`\n-   **dataset_type**: icontains on dataset type`/downloads?dataset_type=camera`",
    "parameters": [
     {
      "in": "query",
      "name": "count",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "dataset",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "dataset_type",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "json",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "user",
      "schema": {
       "type": "string"
      }
     }
    ],
    "tags": [
     "downloads"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedDownloadList"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/downloads/{id}": {
   "get": {
    "operationId": "downloads_retrieve",
    "description": "Example: https://alyx.internationalbrainlab.org/downloads/151f5f77-c9bd-42e6-b31e-5a0e5b080afe",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "downloads"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Download"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "downloads_update",
    "description": "Example: https://alyx.internationalbrainlab.org/downloads/151f5f77-c9bd-42e6-b31e-5a0e5b080afe",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "downloads"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Download"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Download"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Download"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Download"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "downloads_partial_update",
    "description": "Example: https://alyx.internationalbrainlab.org/downloads/151f5f77-c9bd-42e6-b31e-5a0e5b080afe",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "downloads"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDownload"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDownload"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedDownload"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Download"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/fields-of-view": {
   "get": {
    "operationId": "fields_of_view_list",
    "description": "get: **FILTERS**\n\n-   **provenance**: field of view provenance\n    must one of the strings among those choices:\n    'Estimate', 'Functional', 'Landmark', 'Histology'.\n    `/fields-of-view?provenance=Estimate`\n-   **atlas**: One or more brain regions covered by a field of view\n-   **subject**: subject nickname: `/fields-of-view?subject=Algernon`\n-   **project**: the project name\n-   **date**: session date: `/fields-of-view?date=2020-01-15`\n-   **experiment_number**: session number `/fields-of-view?experiment_number=1`\n-   **session**: `/fields-of-view?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **name**: field of view name `/trajectories?name=FOV_01`\n\n[===> FOV model reference](/admin/doc/models/experiments.fov)",
    "parameters": [
     {
      "in": "query",
      "name": "atlas_acronym",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "atlas_id",
      "schema": {
       "type": "number"
      }
     },
     {
      "in": "query",
      "name": "atlas_name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "dataset_types",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "datasets",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "date",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "experiment_number",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "imaging_type",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "project",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "session",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "stack",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "subject",
      "schema": {
       "type": "string"
      }
     }
    ],
    "tags": [
     "fields-of-view"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedFOVList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "fields_of_view_create",
    "description": "get: **FILTERS**\n\n-   **provenance**: field of view provenance\n    must one of the strings among those choices:\n    'Estimate', 'Functional', 'Landmark', 'Histology'.\n    `/fields-of-view?provenance=Estimate`\n-   **atlas**: One or more brain regions covered by a field of view\n-   **subject**: subject nickname: `/fields-of-view?subject=Algernon`\n-   **project**: the project name\n-   **date**: session date: `/fields-of-view?date=2020-01-15`\n-   **experiment_number**: session number `/fields-of-view?experiment_number=1`\n-   **session**: `/fields-of-view?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **name**: field of view name `/trajectories?name=FOV_01`\n\n[===> FOV model reference](/admin/doc/models/experiments.fov)",
    "tags": [
     "fields-of-view"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/FOV"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/FOV"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/FOV"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FOV"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/fields-of-view/{id}": {
   "get": {
    "operationId": "fields_of_view_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "fields-of-view"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FOV"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "fields_of_view_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "fields-of-view"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/FOV"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/FOV"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/FOV"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FOV"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "fields_of_view_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "fields-of-view"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedFOV"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedFOV"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedFOV"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FOV"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "fields_of_view_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "fields-of-view"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/files": {
   "get": {
    "operationId": "files_list",
    "description": "get: **FILTERS**\n\n-   **dataset**: dataset UUID: `/files?dataset=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **exists**: Bool `/files?exists=False`\n-   **lab**: lab name `/files?lab=wittenlab`\n-   **data_repository**: data repository name `/files?data_repository=mainen_lab_SR`\n-   **globus_is_personal**: bool type of Globus endpoint `/files?globus_is_personal=True`\n\n[===> file record model reference](/admin/doc/models/data.filerecord)",
    "parameters": [
     {
      "in": "query",
      "name": "data_repository",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "dataset",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "exists",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "globus_is_personal",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "relative_path",
      "schema": {
       "type": "string"
      }
     }
    ],
    "tags": [
     "files"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedFileRecordList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "files_create",
    "description": "get: **FILTERS**\n\n-   **dataset**: dataset UUID: `/files?dataset=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **exists**: Bool `/files?exists=False`\n-   **lab**: lab name `/files?lab=wittenlab`\n-   **data_repository**: data repository name `/files?data_repository=mainen_lab_SR`\n-   **globus_is_personal**: bool type of Globus endpoint `/files?globus_is_personal=True`\n\n[===> file record model reference](/admin/doc/models/data.filerecord)",
    "tags": [
     "files"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/FileRecord"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/FileRecord"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/FileRecord"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FileRecord"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/files/{id}": {
   "get": {
    "operationId": "files_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "files"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FileRecord"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "files_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "files"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/FileRecord"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/FileRecord"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/FileRecord"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FileRecord"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "files_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "files"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedFileRecord"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedFileRecord"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedFileRecord"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FileRecord"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "files_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "files"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/fov-location": {
   "get": {
    "operationId": "fov_location_list",
    "description": "get: **FILTERS**\n\n-   **provenance**: field of view provenance\n    must one of the strings among those choices:\n    'Estimate', 'Functional', 'Landmark', 'Histology'\n    `/fov-location?provenance=Estimate`\n-   **fov: field of view: `/fov-location?fov=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **default_provenance**: default provenance: `/fov-location?default_provenance=True`\n-   **brain_location**: one or more brain location IDs:\n    `/fov-location?brain_location=[10, 263]`\n\n[===> FOVLocation model reference](/admin/doc/models/experiments.fovlocation)",
    "parameters": [
     {
      "in": "query",
      "name": "auto_datetime",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "brain_region",
      "schema": {
       "type": "array",
       "items": {
        "type": "integer",
        "maximum": 2147483647,
        "minimum": -2147483648
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "coordinate_system",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "default_provenance",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "field_of_view",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "n_xyz",
      "schema": {
       "type": "number"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "provenance",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "x",
      "schema": {
       "type": "number"
      }
     },
     {
      "in": "query",
      "name": "y",
      "schema": {
       "type": "number"
      }
     },
     {
      "in": "query",
      "name": "z",
      "schema": {
       "type": "number"
      }
     }
    ],
    "tags": [
     "fov-location"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedFOVLocationListList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "fov_location_create",
    "description": "get: **FILTERS**\n\n-   **provenance**: field of view provenance\n    must one of the strings among those choices:\n    'Estimate', 'Functional', 'Landmark', 'Histology'\n    `/fov-location?provenance=Estimate`\n-   **fov: field of view: `/fov-location?fov=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **default_provenance**: default provenance: `/fov-location?default_provenance=True`\n-   **brain_location**: one or more brain location IDs:\n    `/fov-location?brain_location=[10, 263]`\n\n[===> FOVLocation model reference](/admin/doc/models/experiments.fovlocation)",
    "tags": [
     "fov-location"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/FOVLocationDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/FOVLocationDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/FOVLocationDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FOVLocationDetail"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/fov-location/{id}": {
   "get": {
    "operationId": "fov_location_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "fov-location"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FOVLocationDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "fov_location_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "fov-location"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/FOVLocationDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/FOVLocationDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/FOVLocationDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FOVLocationDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "fov_location_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "fov-location"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedFOVLocationDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedFOVLocationDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedFOVLocationDetail"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FOVLocationDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "fov_location_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "fov-location"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/imaging-stack": {
   "get": {
    "operationId": "imaging_stack_list",
    "description": "get: **FILTERS**\n\n-   **atlas**: One or more brain regions covered by a stack\n-   **name**: The image stack name\n\n[===> ImagingStack model reference](/admin/doc/models/experiments.imagingstack)",
    "parameters": [
     {
      "in": "query",
      "name": "atlas_acronym",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "atlas_id",
      "schema": {
       "type": "number"
      }
     },
     {
      "in": "query",
      "name": "atlas_name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "imaging-stack"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedImagingStackListList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "imaging_stack_create",
    "description": "get: **FILTERS**\n\n-   **atlas**: One or more brain regions covered by a stack\n-   **name**: The image stack name\n\n[===> ImagingStack model reference](/admin/doc/models/experiments.imagingstack)",
    "tags": [
     "imaging-stack"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/ImagingStackDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/ImagingStackDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/ImagingStackDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ImagingStackDetail"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/imaging-stack/{id}": {
   "get": {
    "operationId": "imaging_stack_retrieve",
    "description": "[===> ImagingStack model reference](/admin/doc/models/experiments.imagingstack)",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "imaging-stack"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ImagingStackDetail"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/insertions": {
   "get": {
    "operationId": "insertions_list",
    "description": "get: **FILTERS**\n\n-   **name**: probe insertion name `/trajectories?name=probe00`\n-   **subject**: subject nickname: `/insertions?subject=Algernon`\n-   **date**: session date: `/inssertions?date=2020-01-15`\n-   **experiment_number**: session number `/insertions?experiment_number=1`\n-   **session**: session UUID`/insertions?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **task_protocol** (icontains)\n-   **location**: location name (icontains)\n-   **project**: project name (icontains)\n-   **model**: probe model name `/insertions?model=3A`\n-   **lab**: lab name (exact)\n-   **tag**: tag name (icontains)\n-   **dataset_types**: dataset type(s)\n-   **datasets**: datasets name(s)\n-   **dataset_qc_lte**: dataset QC value, e.g. PASS, WARNING, FAIL, CRITICAL\n-   **atlas_name**: returns a session if any channel name icontains\n the value: `/insertions?brain_region=visual cortex`\n-   **atlas_acronym**: returns a session if any of its channels name exactly\n matches the value `/insertions?atlas_acronym=SSp-m4`, cf Allen CCFv2017\n-   **atlas_id**: returns a session if any of its channels id matches the\n provided value: `/insertions?atlas_id=950`, cf Allen CCFv2017\n\n[===> probe insertion model reference](/admin/doc/models/experiments.probeinsertion)",
    "parameters": [
     {
      "in": "query",
      "name": "atlas_acronym",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "atlas_id",
      "schema": {
       "type": "number"
      }
     },
     {
      "in": "query",
      "name": "atlas_name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "auto_datetime",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "chronic_insertion",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "dataset_qc_lte",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "dataset_types",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "datasets",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "date",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "experiment_number",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "model",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "project",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "serial",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "session",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "subject",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "tag",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "task_protocol",
      "schema": {
       "type": "string"
      }
     }
    ],
    "tags": [
     "insertions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedProbeInsertionListList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "insertions_create",
    "description": "get: **FILTERS**\n\n-   **name**: probe insertion name `/trajectories?name=probe00`\n-   **subject**: subject nickname: `/insertions?subject=Algernon`\n-   **date**: session date: `/inssertions?date=2020-01-15`\n-   **experiment_number**: session number `/insertions?experiment_number=1`\n-   **session**: session UUID`/insertions?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **task_protocol** (icontains)\n-   **location**: location name (icontains)\n-   **project**: project name (icontains)\n-   **model**: probe model name `/insertions?model=3A`\n-   **lab**: lab name (exact)\n-   **tag**: tag name (icontains)\n-   **dataset_types**: dataset type(s)\n-   **datasets**: datasets name(s)\n-   **dataset_qc_lte**: dataset QC value, e.g. PASS, WARNING, FAIL, CRITICAL\n-   **atlas_name**: returns a session if any channel name icontains\n the value: `/insertions?brain_region=visual cortex`\n-   **atlas_acronym**: returns a session if any of its channels name exactly\n matches the value `/insertions?atlas_acronym=SSp-m4`, cf Allen CCFv2017\n-   **atlas_id**: returns a session if any of its channels id matches the\n provided value: `/insertions?atlas_id=950`, cf Allen CCFv2017\n\n[===> probe insertion model reference](/admin/doc/models/experiments.probeinsertion)",
    "tags": [
     "insertions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/ProbeInsertionList"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/ProbeInsertionList"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/ProbeInsertionList"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ProbeInsertionList"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/insertions/{id}": {
   "get": {
    "operationId": "insertions_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "insertions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ProbeInsertionDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "insertions_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "insertions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/ProbeInsertionDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/ProbeInsertionDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/ProbeInsertionDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ProbeInsertionDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "insertions_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "insertions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedProbeInsertionDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedProbeInsertionDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedProbeInsertionDetail"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ProbeInsertionDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "insertions_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "insertions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/labs": {
   "get": {
    "operationId": "labs_list",
    "parameters": [
     {
      "in": "query",
      "name": "address",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "cage_cleaning_frequency_days",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "cage_type",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "enrichment",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "food",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "institution",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "light_cycle",
      "schema": {
       "type": "integer",
       "nullable": true,
       "enum": [
        0,
        1
       ]
      },
      "description": "* `0` - Normal\n* `1` - Inverted"
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "reference_weight_pct",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "repositories",
      "schema": {
       "type": "array",
       "items": {
        "type": "string",
        "format": "uuid"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "timezone",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "zscore_weight_pct",
      "schema": {
       "type": "number",
       "format": "float"
      }
     }
    ],
    "tags": [
     "labs"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedLabList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "labs_create",
    "tags": [
     "labs"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Lab"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Lab"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Lab"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Lab"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/labs/{name}": {
   "get": {
    "operationId": "labs_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "labs"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Lab"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "labs_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "labs"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Lab"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Lab"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Lab"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Lab"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "labs_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "labs"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedLab"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedLab"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedLab"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Lab"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "labs_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "labs"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/locations": {
   "get": {
    "operationId": "locations_list",
    "description": "Lists Lab Location",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "locations"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedLabLocationList"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/locations/{name}": {
   "get": {
    "operationId": "locations_retrieve",
    "description": "Allows viewing of full detail and deleting a water administration.",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "locations"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/LabLocation"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "locations_update",
    "description": "Allows viewing of full detail and deleting a water administration.",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "locations"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/LabLocation"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/LabLocation"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/LabLocation"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/LabLocation"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "locations_partial_update",
    "description": "Allows viewing of full detail and deleting a water administration.",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "locations"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedLabLocation"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedLabLocation"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedLabLocation"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/LabLocation"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/new-download": {
   "post": {
    "operationId": "new_download_create",
    "description": "REST query data field to log a download:\n```\ndata = {'user': 'labmember_name',\n        'datasets': 'pk1',    # supports multiple pks as a list\n        'projects': 'project_name')   # supports multiple projects as a list\n```\n\nIf there are multiple projects and multiple datasets, each datasets will be logged as\ndownloaded for all projects.",
    "tags": [
     "new-download"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     },
     {}
    ],
    "responses": {
     "201": {
      "description": "No response body"
     }
    }
   }
  },
  "/notes": {
   "get": {
    "operationId": "notes_list",
    "description": "post:\nIf an image is provided, the request body can contain an additional item\n\n`width`: desired width to resize the image for storage. Aspect ratio will be maintained.\nOptions are\n\n- **None** to use the UPLOADED_IMAGE_WIDTH specified in settings (default)\n- **'orig'** to keep original image size\n- any **integer** to specify the image width",
    "parameters": [
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "notes"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedNoteList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "notes_create",
    "description": "post:\nIf an image is provided, the request body can contain an additional item\n\n`width`: desired width to resize the image for storage. Aspect ratio will be maintained.\nOptions are\n\n- **None** to use the UPLOADED_IMAGE_WIDTH specified in settings (default)\n- **'orig'** to keep original image size\n- any **integer** to specify the image width",
    "tags": [
     "notes"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Note"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Note"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Note"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Note"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/notes/{id}": {
   "get": {
    "operationId": "notes_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "notes"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Note"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "notes_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "notes"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Note"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Note"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Note"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Note"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "notes_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "notes"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedNote"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedNote"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedNote"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Note"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "notes_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "notes"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/procedures": {
   "get": {
    "operationId": "procedures_list",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "procedures"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedProcedureTypeList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "procedures_create",
    "tags": [
     "procedures"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/ProcedureType"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/ProcedureType"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/ProcedureType"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ProcedureType"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/projects": {
   "get": {
    "operationId": "projects_list",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "projects"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedProjectList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "projects_create",
    "tags": [
     "projects"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Project"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Project"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Project"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Project"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/projects/{name}": {
   "get": {
    "operationId": "projects_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "projects"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Project"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "projects_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "projects"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Project"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Project"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Project"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Project"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "projects_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "projects"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedProject"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedProject"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedProject"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Project"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "projects_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "projects"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/register-file": {
   "post": {
    "operationId": "register_file_create",
    "description": "Endpoint to create a register a dataset record through the REST API.\n\nThe session is retrieved by the ALF convention in the relative path, so this field has to\nmatch the format Subject/Date/Number as shown below.\n\nThe set of repositories are given through the labs. The lab is by default the subject lab,\nbut if it is specified, it overrides the subject lab entirely.\n\nOne repository or lab is mandatory, as this is the repository where the files\ncurrently exist It can be identified either by name (recommended) or hostname\n(compatibility).\nThe client side REST query should look like this:\n\n```python\nr_ = {'created_by': 'user_name_alyx',\n      'name': 'repository_name_alyx',  # optional, will be added if doesn't match lab\n      'path': 'ZM_1085/2019-02-12/002/alf',  # relative path to repo path\n      'filenames': ['file1', 'file2'],\n      'labs': 'alyxlabname1',  # optional, will get the subjects lab if not used\n      'hashes': ['f9c26e42-8f22-4f07-8fdd-bb51a63bedaa',\n               'f9c26e42-8f22-4f07-8fdd-bb51a63bedad']  # optional\n      'filesizes': [145684, 354213],    # optional\n      'qc': ['NOT_SET', 'PASS'],  # optional\n      'server_only': True,   # optional, defaults to False. Will only create file\n      # records in the server repositories and skips local repositories\n      'versions': ['1.4.4', '1.4.4'],  # optional, usually refers to the software version\n      # used to generate the file\n      'default': False #optional , defaults to True, if more than one revision of dataset,\n      whether to set current one as the default\n      'check_protected: False # optional, defaults to False, before attempting to register\n      datasets checks if any are protected\n      }\n```\n\nFor backward compatibility the following is allowed (projects are labs the repo lookup\nis done on the hostname instead of the repository name):\n```python\n r_ = {'hostname': 'repo_hostname_alyx', # optional, will be added if doesn't match lab\n       'projects': 'alyx_lab_name',  # optional, alias of lab field above\n      }\n```\n\nIf the dataset already exists, it will use the file hash to deduce if the file has been\npatched or not (i.e. the filerecords will be created as not existing)",
    "tags": [
     "register-file"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     },
     {}
    ],
    "responses": {
     "201": {
      "description": "No response body"
     }
    }
   }
  },
  "/revisions": {
   "get": {
    "operationId": "revisions_list",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "revisions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedRevisionList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "revisions_create",
    "tags": [
     "revisions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Revision"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Revision"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Revision"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Revision"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/revisions/{name}": {
   "get": {
    "operationId": "revisions_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "revisions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Revision"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "revisions_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "revisions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Revision"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Revision"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Revision"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Revision"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "revisions_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "revisions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedRevision"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedRevision"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedRevision"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Revision"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "revisions_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "revisions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/sessions": {
   "get": {
    "operationId": "sessions_list",
    "description": "    get: **FILTERS**\n\n-   **subject**: subject nickname `/sessions?subject=Algernon`\n-   **dataset_types**: dataset type(s) `/sessions?dataset_types=trials.table,camera.times`\n-   **datasets**: dataset name(s) `/sessions?datasets=_ibl_leftCamera.times.npy`\n-   **dataset_qc_lte**: dataset QC values less than or equal to this\n    `/sessions?dataset_qc_lte=WARNING`\n-   **number**: session number\n-   **users**: experimenters (exact)\n-   **date_range**: date `/sessions?date_range=2020-01-12,2020-01-16`\n-   **lab**: lab name (exact)\n-   **task_protocol** (icontains)\n-   **location**: location name (icontains)\n-   **projects**: project name (icontains)\n-   **json**: queries on json fields, for example here `tutu`\n    -   exact/equal lookup: `/sessions?extended_qc=tutu,True`,\n    -   gte lookup: `/sessions/?extended_qc=tutu__gte,0.5`,\n-   **extended_qc** queries on json fields, for example here `qc_bool` and `qc_pct`,\n    values and fields come by pairs, using semi-colon as a separator\n    -   exact/equal lookup: `/sessions?extended_qc=qc_bool;True`,\n    -   gte lookup: `/sessions/?extended_qc=qc_pct__gte;0.5`,\n    -   chained lookups: `/sessions/?extended_qc=qc_pct__gte;0.5;qc_bool;True`,\n-   **performance_gte**, **performance_lte**: percentage of successful trials gte/lte\n-   **brain_region**: returns a session if any channel name icontains the value:\n    `/sessions?brain_region=visual cortex`\n-   **atlas_acronym**: returns a session if any of its channels name exactly matches the value\n    `/sessions?atlas_acronym=SSp-m4`, cf Allen CCFv2017\n-   **atlas_id**: returns a session if any of its channels id matches the provided value:\n    `/sessions?atlas_id=950`, cf Allen CCFv2017\n-   **qc**: returns sessions for which the qc statuses matches provided string. Should be\none of CRITICAL, ERROR, WARNING, NOT_SET, PASS\n    `/sessions?qc=CRITICAL`\n-   **histology**: returns sessions for which the subject has an histology session:\n    `/sessions?histology=True`\n-   **django**: generic filter allowing lookups (same syntax as json filter)\n    `/sessions?django=projects__name__icontains,matlab`\n    filters sessions that have matlab in the project names\n    `/sessions?django=~projects__name__icontains,matlab`\n    does the exclusive set: filters sessions that do not have matlab in the project names\n\n[===> session model reference](/admin/doc/models/actions.session)",
    "parameters": [
     {
      "in": "query",
      "name": "atlas_acronym",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "atlas_id",
      "schema": {
       "type": "number"
      }
     },
     {
      "in": "query",
      "name": "atlas_name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "auto_datetime",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "dataset_qc_lte",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "dataset_types",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "datasets",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "date_range",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "end_time",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "extended_qc",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "histology",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "json",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "location",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "n_correct_trials",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "n_trials",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "narrative",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "nickname",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "number",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "parent_session",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "performance_gte",
      "schema": {
       "type": "number"
      }
     },
     {
      "in": "query",
      "name": "performance_lte",
      "schema": {
       "type": "number"
      }
     },
     {
      "in": "query",
      "name": "procedures",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "project",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "projects",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "qc",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "start_time",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "subject",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "tag",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "task_protocol",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "type",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "users",
      "schema": {
       "type": "string"
      }
     }
    ],
    "tags": [
     "sessions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedSessionListList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "sessions_create",
    "description": "    get: **FILTERS**\n\n-   **subject**: subject nickname `/sessions?subject=Algernon`\n-   **dataset_types**: dataset type(s) `/sessions?dataset_types=trials.table,camera.times`\n-   **datasets**: dataset name(s) `/sessions?datasets=_ibl_leftCamera.times.npy`\n-   **dataset_qc_lte**: dataset QC values less than or equal to this\n    `/sessions?dataset_qc_lte=WARNING`\n-   **number**: session number\n-   **users**: experimenters (exact)\n-   **date_range**: date `/sessions?date_range=2020-01-12,2020-01-16`\n-   **lab**: lab name (exact)\n-   **task_protocol** (icontains)\n-   **location**: location name (icontains)\n-   **projects**: project name (icontains)\n-   **json**: queries on json fields, for example here `tutu`\n    -   exact/equal lookup: `/sessions?extended_qc=tutu,True`,\n    -   gte lookup: `/sessions/?extended_qc=tutu__gte,0.5`,\n-   **extended_qc** queries on json fields, for example here `qc_bool` and `qc_pct`,\n    values and fields come by pairs, using semi-colon as a separator\n    -   exact/equal lookup: `/sessions?extended_qc=qc_bool;True`,\n    -   gte lookup: `/sessions/?extended_qc=qc_pct__gte;0.5`,\n    -   chained lookups: `/sessions/?extended_qc=qc_pct__gte;0.5;qc_bool;True`,\n-   **performance_gte**, **performance_lte**: percentage of successful trials gte/lte\n-   **brain_region**: returns a session if any channel name icontains the value:\n    `/sessions?brain_region=visual cortex`\n-   **atlas_acronym**: returns a session if any of its channels name exactly matches the value\n    `/sessions?atlas_acronym=SSp-m4`, cf Allen CCFv2017\n-   **atlas_id**: returns a session if any of its channels id matches the provided value:\n    `/sessions?atlas_id=950`, cf Allen CCFv2017\n-   **qc**: returns sessions for which the qc statuses matches provided string. Should be\none of CRITICAL, ERROR, WARNING, NOT_SET, PASS\n    `/sessions?qc=CRITICAL`\n-   **histology**: returns sessions for which the subject has an histology session:\n    `/sessions?histology=True`\n-   **django**: generic filter allowing lookups (same syntax as json filter)\n    `/sessions?django=projects__name__icontains,matlab`\n    filters sessions that have matlab in the project names\n    `/sessions?django=~projects__name__icontains,matlab`\n    does the exclusive set: filters sessions that do not have matlab in the project names\n\n[===> session model reference](/admin/doc/models/actions.session)",
    "tags": [
     "sessions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/SessionDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/SessionDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/SessionDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/SessionDetail"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/sessions/{id}": {
   "get": {
    "operationId": "sessions_retrieve",
    "description": "Detail of one session",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "sessions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/SessionDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "sessions_update",
    "description": "Detail of one session",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "sessions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/SessionDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/SessionDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/SessionDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/SessionDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "sessions_partial_update",
    "description": "Detail of one session",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "sessions"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedSessionDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedSessionDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedSessionDetail"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/SessionDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "sessions_destroy",
    "description": "Detail of one session",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "sessions"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/subjects": {
   "get": {
    "operationId": "subjects_list",
    "parameters": [
     {
      "in": "query",
      "name": "actual_severity",
      "schema": {
       "nullable": true,
       "enum": [
        1,
        2,
        3,
        4,
        5,
        null
       ]
      },
      "description": "* `None` - \n* `1` - Sub-threshold\n* `2` - Mild\n* `3` - Moderate\n* `4` - Severe\n* `5` - Non-recovery"
     },
     {
      "in": "query",
      "name": "adverse_effects",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "alive",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "birth_date",
      "schema": {
       "type": "string",
       "format": "date"
      }
     },
     {
      "in": "query",
      "name": "cage",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "cull_method",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "death_date",
      "schema": {
       "type": "string",
       "format": "date"
      }
     },
     {
      "in": "query",
      "name": "description",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "ear_mark",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "genotype",
      "schema": {
       "type": "array",
       "items": {
        "type": "string",
        "format": "uuid"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "genotype_date",
      "schema": {
       "type": "string",
       "format": "date"
      }
     },
     {
      "in": "query",
      "name": "genotype_test",
      "schema": {
       "type": "array",
       "items": {
        "type": "string",
        "format": "uuid"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "json",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "line",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "litter",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "nickname",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "project",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "projects",
      "schema": {
       "type": "array",
       "items": {
        "type": "string",
        "format": "uuid"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "protocol_number",
      "schema": {
       "type": "string",
       "enum": [
        "1",
        "2",
        "3",
        "4"
       ]
      },
      "description": "* `1` - 1\n* `2` - 2\n* `3` - 3\n* `4` - 4"
     },
     {
      "in": "query",
      "name": "reduced",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "reduced_date",
      "schema": {
       "type": "string",
       "format": "date"
      }
     },
     {
      "in": "query",
      "name": "request",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "responsible_user",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "sex",
      "schema": {
       "type": "string",
       "enum": [
        "F",
        "M",
        "U"
       ]
      },
      "description": "* `M` - Male\n* `F` - Female\n* `U` - Unknown"
     },
     {
      "in": "query",
      "name": "source",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "species",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "stock",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "strain",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "to_be_culled",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "to_be_genotyped",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "water_restricted",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "wean_date",
      "schema": {
       "type": "string",
       "format": "date"
      }
     }
    ],
    "tags": [
     "subjects"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedSubjectListList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "subjects_create",
    "tags": [
     "subjects"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/SubjectList"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/SubjectList"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/SubjectList"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/SubjectList"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/subjects/{nickname}": {
   "get": {
    "operationId": "subjects_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "nickname",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "subjects"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/SubjectDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "subjects_update",
    "parameters": [
     {
      "in": "path",
      "name": "nickname",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "subjects"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/SubjectDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/SubjectDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/SubjectDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/SubjectDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "subjects_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "nickname",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "subjects"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedSubjectDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedSubjectDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedSubjectDetail"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/SubjectDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "subjects_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "nickname",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "subjects"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/surgeries": {
   "get": {
    "operationId": "surgeries_list",
    "description": "    get: **FILTERS**\n\n-   **subject**: subject nickname `/sessions?subject=Algernon`\n[===> session model reference](/admin/doc/models/actions.surgery)",
    "parameters": [
     {
      "in": "query",
      "name": "date_range",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "end_time",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "implant_weight",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "json",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "location",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "narrative",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "nickname",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "outcome_type",
      "schema": {
       "type": "string",
       "enum": [
        "a",
        "n",
        "r"
       ]
      },
      "description": "* `a` - Acute\n* `r` - Recovery\n* `n` - Non-recovery"
     },
     {
      "in": "query",
      "name": "procedure",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "procedures",
      "schema": {
       "type": "array",
       "items": {
        "type": "string",
        "format": "uuid"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "start_time",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "subject",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "users",
      "schema": {
       "type": "string"
      }
     }
    ],
    "tags": [
     "surgeries"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedSurgeryList"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/surgeries/{id}": {
   "get": {
    "operationId": "surgeries_retrieve",
    "description": "Allows viewing of full detail and update of a surgery.",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "surgeries"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Surgery"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "surgeries_update",
    "description": "Allows viewing of full detail and update of a surgery.",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "surgeries"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Surgery"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Surgery"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Surgery"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Surgery"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "surgeries_partial_update",
    "description": "Allows viewing of full detail and update of a surgery.",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "surgeries"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedSurgery"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedSurgery"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedSurgery"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Surgery"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/sync-file-status": {
   "get": {
    "operationId": "sync_file_status_retrieve",
    "tags": [
     "sync-file-status"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     },
     {}
    ],
    "responses": {
     "200": {
      "description": "No response body"
     }
    }
   },
   "post": {
    "operationId": "sync_file_status_create",
    "tags": [
     "sync-file-status"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     },
     {}
    ],
    "responses": {
     "200": {
      "description": "No response body"
     }
    }
   }
  },
  "/tags": {
   "get": {
    "operationId": "tags_list",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "tags"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedTagList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "tags_create",
    "tags": [
     "tags"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Tag"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Tag"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Tag"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Tag"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/tags/{name}": {
   "get": {
    "operationId": "tags_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "tags"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Tag"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "tags_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "tags"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Tag"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Tag"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Tag"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Tag"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "tags_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "tags"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedTag"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedTag"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedTag"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Tag"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "tags_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "tags"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/tasks": {
   "get": {
    "operationId": "tasks_list",
    "description": "get: **FILTERS**\n-   **task**: task name `/jobs?task=EphysSyncPulses`\n-   **session**: uuid `/jobs?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **lab**: lab name from session table `/jobs?lab=churchlandlab`\n-   **pipeline**: pipeline field from task `/jobs?pipeline=ephys`\n\n[===> task model reference](/admin/doc/models/jobs.task)",
    "parameters": [
     {
      "in": "query",
      "name": "arguments",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "cpu",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "data_repository",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "datetime",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "executable",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "gpu",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "graph",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "io_charge",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "level",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "log",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "parents",
      "schema": {
       "type": "array",
       "items": {
        "type": "string",
        "format": "uuid"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "priority",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "ram",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "session",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "status",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "time_elapsed_secs",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "time_out_secs",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "version",
      "schema": {
       "type": "string"
      }
     }
    ],
    "tags": [
     "tasks"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedTaskList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "tasks_create",
    "description": "get: **FILTERS**\n-   **task**: task name `/jobs?task=EphysSyncPulses`\n-   **session**: uuid `/jobs?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **lab**: lab name from session table `/jobs?lab=churchlandlab`\n-   **pipeline**: pipeline field from task `/jobs?pipeline=ephys`\n\n[===> task model reference](/admin/doc/models/jobs.task)",
    "tags": [
     "tasks"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Task"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Task"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Task"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Task"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/tasks/{id}": {
   "get": {
    "operationId": "tasks_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "tasks"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Task"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "tasks_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "tasks"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Task"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/Task"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/Task"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Task"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "tasks_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "tasks"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedTask"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedTask"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedTask"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Task"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "tasks_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "tasks"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/trajectories": {
   "get": {
    "operationId": "trajectories_list",
    "description": "get: **FILTERS**\n\n-   **provenance**: probe insertion provenance\n    must one of the strings among those choices:\n    'Ephys aligned histology track', 'Histology track', 'Micro-manipulator', 'Planned'\n    `/trajectories?provenance=Planned`\n-   **subject: subject nickname: `/trajectories?subject=Algernon`\n-   **date**: session date: `/trajectories?date=2020-01-15`\n-   **experiment_number**: session number `/trajectories?experiment_number=1`\n-   **session**: `/trajectories?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **probe**: probe_insertion name `/trajectories?probe=probe01`\n\n[===> trajectory model reference](/admin/doc/models/experiments.trajectoryestimate)",
    "parameters": [
     {
      "in": "query",
      "name": "chronic_insertion",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "coordinate_system",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "date",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "datetime",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "depth",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "experiment_number",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "phi",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "probe",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "probe_insertion",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "project",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "provenance",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "roll",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "session",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "subject",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "theta",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "x",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "y",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "z",
      "schema": {
       "type": "number",
       "format": "float"
      }
     }
    ],
    "tags": [
     "trajectories"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedTrajectoryEstimateList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "trajectories_create",
    "description": "get: **FILTERS**\n\n-   **provenance**: probe insertion provenance\n    must one of the strings among those choices:\n    'Ephys aligned histology track', 'Histology track', 'Micro-manipulator', 'Planned'\n    `/trajectories?provenance=Planned`\n-   **subject: subject nickname: `/trajectories?subject=Algernon`\n-   **date**: session date: `/trajectories?date=2020-01-15`\n-   **experiment_number**: session number `/trajectories?experiment_number=1`\n-   **session**: `/trajectories?session=aad23144-0e52-4eac-80c5-c4ee2decb198`\n-   **probe**: probe_insertion name `/trajectories?probe=probe01`\n\n[===> trajectory model reference](/admin/doc/models/experiments.trajectoryestimate)",
    "tags": [
     "trajectories"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/TrajectoryEstimate"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/TrajectoryEstimate"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/TrajectoryEstimate"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/TrajectoryEstimate"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/trajectories/{id}": {
   "get": {
    "operationId": "trajectories_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "trajectories"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/TrajectoryEstimate"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "trajectories_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "trajectories"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/TrajectoryEstimate"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/TrajectoryEstimate"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/TrajectoryEstimate"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/TrajectoryEstimate"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "trajectories_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "trajectories"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedTrajectoryEstimate"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedTrajectoryEstimate"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedTrajectoryEstimate"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/TrajectoryEstimate"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "trajectories_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "trajectories"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/uploaded/{img_url}": {
   "get": {
    "operationId": "uploaded_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "img_url",
      "schema": {
       "type": "string",
       "pattern": "^.*$"
      },
      "required": true
     }
    ],
    "tags": [
     "uploaded"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "description": "No response body"
     }
    }
   }
  },
  "/users": {
   "get": {
    "operationId": "users_list",
    "description": "get: **FILTERS**\n- 'id'\n- 'username'\n- 'email'\n- 'subjects_responsible'\n- 'lab'\n- 'allowed_users'\n[===> user model reference](/admin/doc/models/misc.labmember)",
    "parameters": [
     {
      "in": "query",
      "name": "allowed_users",
      "schema": {
       "type": "array",
       "items": {
        "type": "string",
        "format": "uuid"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "date_joined",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "email",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "first_name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "groups",
      "schema": {
       "type": "array",
       "items": {
        "type": "integer"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "is_active",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "is_public_user",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "is_staff",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "is_stock_manager",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "is_superuser",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "last_login",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "last_name",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "password",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "user_permissions",
      "schema": {
       "type": "array",
       "items": {
        "type": "integer"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "username",
      "schema": {
       "type": "string"
      }
     }
    ],
    "tags": [
     "users"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedUserList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "users_create",
    "description": "get: **FILTERS**\n- 'id'\n- 'username'\n- 'email'\n- 'subjects_responsible'\n- 'lab'\n- 'allowed_users'\n[===> user model reference](/admin/doc/models/misc.labmember)",
    "tags": [
     "users"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/User"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/User"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/User"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/User"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/users/{username}": {
   "get": {
    "operationId": "users_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "username",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "users"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/User"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "users_update",
    "parameters": [
     {
      "in": "path",
      "name": "username",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "users"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/User"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/User"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/User"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/User"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "users_partial_update",
    "parameters": [
     {
      "in": "path",
      "name": "username",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "users"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedUser"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedUser"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedUser"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/User"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "users_destroy",
    "parameters": [
     {
      "in": "path",
      "name": "username",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "users"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/water-administrations": {
   "get": {
    "operationId": "water_administrations_list",
    "description": "Lists or creates a new water administration.",
    "parameters": [
     {
      "in": "query",
      "name": "adlib",
      "schema": {
       "type": "boolean"
      }
     },
     {
      "in": "query",
      "name": "date_range",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "date_time",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "json",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "location",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "nickname",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "session",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "subject",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "user",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "users",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "water_administered",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "water_type",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     }
    ],
    "tags": [
     "water-administrations"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedWaterAdministrationDetailList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "water_administrations_create",
    "description": "Lists or creates a new water administration.",
    "tags": [
     "water-administrations"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/WaterAdministrationDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/WaterAdministrationDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/WaterAdministrationDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/WaterAdministrationDetail"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/water-administrations/{id}": {
   "get": {
    "operationId": "water_administrations_retrieve",
    "description": "Allows viewing of full detail and deleting a water administration.",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "water-administrations"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/WaterAdministrationDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "put": {
    "operationId": "water_administrations_update",
    "description": "Allows viewing of full detail and deleting a water administration.",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "water-administrations"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/WaterAdministrationDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/WaterAdministrationDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/WaterAdministrationDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/WaterAdministrationDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "patch": {
    "operationId": "water_administrations_partial_update",
    "description": "Allows viewing of full detail and deleting a water administration.",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "water-administrations"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/PatchedWaterAdministrationDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/PatchedWaterAdministrationDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/PatchedWaterAdministrationDetail"
       }
      }
     }
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/WaterAdministrationDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "water_administrations_destroy",
    "description": "Allows viewing of full detail and deleting a water administration.",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "water-administrations"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  },
  "/water-requirement/{nickname}": {
   "get": {
    "operationId": "water_requirement_retrieve",
    "parameters": [
     {
      "in": "path",
      "name": "nickname",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "water-requirement"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "description": "No response body"
     }
    }
   }
  },
  "/water-restricted-subjects": {
   "get": {
    "operationId": "water_restricted_subjects_list",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "water-restricted-subjects"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedWaterRestrictedSubjectListList"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/water-restriction": {
   "get": {
    "operationId": "water_restriction_list",
    "description": "Lists water restriction.",
    "parameters": [
     {
      "in": "query",
      "name": "date_range",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "end_time",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "json",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "location",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "narrative",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "nickname",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "procedures",
      "schema": {
       "type": "array",
       "items": {
        "type": "string",
        "format": "uuid"
       }
      },
      "explode": true,
      "style": "form"
     },
     {
      "in": "query",
      "name": "reference_weight",
      "schema": {
       "type": "number",
       "format": "float"
      }
     },
     {
      "in": "query",
      "name": "start_time",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "subject",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "users",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "water_type",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     }
    ],
    "tags": [
     "water-restriction"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedWaterRestrictionListList"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/water-type": {
   "get": {
    "operationId": "water_type_list",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "water-type"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedWaterTypeDetailList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "water_type_create",
    "tags": [
     "water-type"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/WaterTypeDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/WaterTypeDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/WaterTypeDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/WaterTypeDetail"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/water-type/{name}": {
   "get": {
    "operationId": "water_type_list_2",
    "parameters": [
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     }
    ],
    "tags": [
     "water-type"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedWaterTypeDetailList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "water_type_create_2",
    "parameters": [
     {
      "in": "path",
      "name": "name",
      "schema": {
       "type": "string"
      },
      "required": true
     }
    ],
    "tags": [
     "water-type"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/WaterTypeDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/WaterTypeDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/WaterTypeDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/WaterTypeDetail"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/weighings": {
   "get": {
    "operationId": "weighings_list",
    "description": "Lists or creates a new weighing.",
    "parameters": [
     {
      "in": "query",
      "name": "date_range",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "date_time",
      "schema": {
       "type": "string",
       "format": "date-time"
      }
     },
     {
      "in": "query",
      "name": "django",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "json",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "lab",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "limit",
      "required": false,
      "in": "query",
      "description": "Number of results to return per page.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "location",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "name",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "nickname",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "offset",
      "required": false,
      "in": "query",
      "description": "The initial index from which to return the results.",
      "schema": {
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "subject",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "user",
      "schema": {
       "type": "string",
       "format": "uuid"
      }
     },
     {
      "in": "query",
      "name": "users",
      "schema": {
       "type": "string"
      }
     },
     {
      "in": "query",
      "name": "weight",
      "schema": {
       "type": "number",
       "format": "float"
      }
     }
    ],
    "tags": [
     "weighings"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/PaginatedWeighingDetailList"
        }
       }
      },
      "description": ""
     }
    }
   },
   "post": {
    "operationId": "weighings_create",
    "description": "Lists or creates a new weighing.",
    "tags": [
     "weighings"
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/WeighingDetail"
       }
      },
      "application/x-www-form-urlencoded": {
       "schema": {
        "$ref": "#/components/schemas/WeighingDetail"
       }
      },
      "multipart/form-data": {
       "schema": {
        "$ref": "#/components/schemas/WeighingDetail"
       }
      }
     },
     "required": true
    },
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "201": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/WeighingDetail"
        }
       }
      },
      "description": ""
     }
    }
   }
  },
  "/weighings/{id}": {
   "get": {
    "operationId": "weighings_retrieve",
    "description": "Allows viewing of full detail and deleting a weighing.",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "weighings"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/WeighingDetail"
        }
       }
      },
      "description": ""
     }
    }
   },
   "delete": {
    "operationId": "weighings_destroy",
    "description": "Allows viewing of full detail and deleting a weighing.",
    "parameters": [
     {
      "in": "path",
      "name": "id",
      "schema": {
       "type": "string",
       "format": "uuid"
      },
      "required": true
     }
    ],
    "tags": [
     "weighings"
    ],
    "security": [
     {
      "cookieAuth": []
     },
     {
      "tokenAuth": []
     }
    ],
    "responses": {
     "204": {
      "description": "No response body"
     }
    }
   }
  }
 },
 "components": {
  "schemas": {
   "AuthToken": {
    "type": "object",
    "properties": {
     "username": {
      "type": "string",
      "writeOnly": true
     },
     "password": {
      "type": "string",
      "writeOnly": true
     },
     "token": {
      "type": "string",
      "readOnly": true
     }
    },
    "required": [
     "password",
     "token",
     "username"
    ]
   },
   "BlankEnum": {
    "enum": [
     ""
    ]
   },
   "BrainRegion": {
    "type": "object",
    "properties": {
     "id": {
      "type": "integer",
      "readOnly": true
     },
     "acronym": {
      "type": "string",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "readOnly": true
     },
     "description": {
      "type": "string",
      "nullable": true
     },
     "parent": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648,
      "readOnly": true
     },
     "related_descriptions": {
      "type": "string",
      "readOnly": true
     }
    },
    "required": [
     "acronym",
     "id",
     "name",
     "parent",
     "related_descriptions"
    ]
   },
   "Channel": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "trajectory_estimate": {
      "type": "string",
      "format": "uuid"
     },
     "brain_region": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "axial": {
      "type": "number",
      "format": "double",
      "nullable": true,
      "description": "Distance in micrometers along the probe from the tip. 0 means the tip."
     },
     "lateral": {
      "type": "number",
      "format": "double",
      "nullable": true,
      "description": "Distance in micrometers across the probe"
     },
     "x": {
      "type": "number",
      "format": "double",
      "nullable": true,
      "title": "X-ml (um)",
      "description": "brain surface medio-lateral coordinate (um) ofthe insertion, right +, relative to Bregma"
     },
     "y": {
      "type": "number",
      "format": "double",
      "nullable": true,
      "title": "Y-ap (um)",
      "description": "brain surface antero-posterior coordinate (um) of the insertion, front +, relative to Bregma"
     },
     "z": {
      "type": "number",
      "format": "double",
      "nullable": true,
      "title": "Z-dv (um)",
      "description": "brain surface dorso-ventral coordinate (um) of the insertion, up +, relative to Bregma"
     }
    },
    "required": [
     "id"
    ]
   },
   "ChronicInsertionDetail": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules')."
     },
     "lab": {
      "type": "string"
     },
     "model": {
      "type": "string",
      "description": "manufacturer's part number e.g. A4x8-5mm-100-20"
     },
     "start_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "serial": {
      "type": "string",
      "description": "Probe serial number",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "probe_insertion": {
      "type": "string",
      "readOnly": true
     }
    },
    "required": [
     "id",
     "probe_insertion"
    ]
   },
   "ChronicInsertionList": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules')."
     },
     "lab": {
      "type": "string"
     },
     "model": {
      "type": "string",
      "description": "manufacturer's part number e.g. A4x8-5mm-100-20"
     },
     "start_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "serial": {
      "type": "string",
      "description": "Probe serial number",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "probe_insertion": {
      "type": "string",
      "readOnly": true
     }
    },
    "required": [
     "id",
     "probe_insertion"
    ]
   },
   "DataFormat": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "name": {
      "type": "string",
      "description": "short identifying name, e.g. 'npy'",
      "maxLength": 255
     },
     "description": {
      "type": "string",
      "description": "Human-readable description of the file format e.g. 'npy-formatted square numerical array'.",
      "maxLength": 255
     },
     "file_extension": {
      "type": "string",
      "description": "file extension, starting with a dot.",
      "pattern": "^\\.[^\\.]+$",
      "maxLength": 255
     },
     "matlab_loader_function": {
      "type": "string",
      "description": "Name of MATLAB loader function'.",
      "maxLength": 255
     },
     "python_loader_function": {
      "type": "string",
      "description": "Name of Python loader function'.",
      "maxLength": 255
     }
    },
    "required": [
     "file_extension",
     "id",
     "name"
    ]
   },
   "DataRepository": {
    "type": "object",
    "properties": {
     "name": {
      "type": "string",
      "maxLength": 255
     },
     "timezone": {
      "type": "string",
      "description": "Timezone of the server (see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)",
      "maxLength": 64
     },
     "globus_path": {
      "type": "string",
      "description": "absolute path to the repository on the server e.g. /mnt/something/",
      "maxLength": 1000
     },
     "hostname": {
      "type": "string",
      "description": "Host name of the network drive",
      "pattern": "^[a-zA-Z0-9\\.\\-\\_]+$",
      "maxLength": 200
     },
     "data_url": {
      "type": "string",
      "format": "uri",
      "nullable": true,
      "description": "URL of the data repository, if it is accessible via HTTP",
      "maxLength": 200
     },
     "repository_type": {
      "type": "string",
      "nullable": true
     },
     "globus_endpoint_id": {
      "type": "string",
      "format": "uuid",
      "nullable": true,
      "description": "UUID of the globus endpoint"
     },
     "globus_is_personal": {
      "type": "boolean",
      "nullable": true,
      "description": "whether the Globus endpoint is personal or not. By default, Globus cannot transfer a file between two personal endpoints."
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    },
    "required": [
     "name"
    ]
   },
   "DataRepositoryType": {
    "type": "object",
    "properties": {
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "name": {
      "type": "string",
      "maxLength": 255
     }
    },
    "required": [
     "name",
     "url"
    ]
   },
   "Dataset": {
    "type": "object",
    "properties": {
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "created_by": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "created_datetime": {
      "type": "string",
      "format": "date-time",
      "nullable": true,
      "description": "The creation datetime."
     },
     "dataset_type": {
      "type": "string",
      "description": "Short identifying nickname, e.g. 'spikes.times'"
     },
     "data_format": {
      "type": "string",
      "description": "short identifying name, e.g. 'npy'"
     },
     "collection": {
      "type": "string",
      "nullable": true
     },
     "session": {
      "type": "string",
      "format": "uri"
     },
     "file_size": {
      "type": "integer",
      "nullable": true
     },
     "hash": {
      "type": "string",
      "nullable": true
     },
     "version": {
      "type": "string",
      "nullable": true
     },
     "experiment_number": {
      "type": "string",
      "readOnly": true
     },
     "file_records": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/DatasetFileRecords"
      },
      "readOnly": true
     },
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules').",
      "writeOnly": true
     },
     "date": {
      "type": "string",
      "format": "date"
     },
     "number": {
      "type": "integer"
     },
     "auto_datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "nullable": true,
      "title": "Last updated"
     },
     "revision": {
      "type": "string",
      "description": "Long name"
     },
     "default_dataset": {
      "type": "boolean",
      "nullable": true
     },
     "protected": {
      "type": "string",
      "readOnly": true
     },
     "public": {
      "type": "string",
      "readOnly": true
     },
     "tags": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Long name"
      }
     },
     "qc": {
      "type": "string"
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    },
    "required": [
     "auto_datetime",
     "dataset_type",
     "experiment_number",
     "file_records",
     "name",
     "protected",
     "public",
     "url"
    ]
   },
   "DatasetFileRecords": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "data_repository": {
      "type": "string"
     },
     "data_repository_path": {
      "type": "string",
      "readOnly": true
     },
     "relative_path": {
      "type": "string",
      "description": "path name within repository",
      "pattern": "^[a-zA-Z0-9\\_][^\\\\\\:]+$",
      "maxLength": 1000
     },
     "data_url": {
      "type": "string",
      "readOnly": true
     },
     "exists": {
      "type": "boolean",
      "description": "Whether the file exists in the data repository"
     }
    },
    "required": [
     "data_repository",
     "data_repository_path",
     "data_url",
     "id",
     "relative_path"
    ]
   },
   "DatasetType": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Short identifying nickname, e.g. 'spikes.times'",
      "maxLength": 255
     },
     "created_by": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
      "nullable": true
     },
     "description": {
      "type": "string",
      "description": "Human-readable description of data type. Should say what is in the file, and how to read it. For DataCollections, it should list what Datasets are expected in the the collection. E.g. 'Files related to spike events, including spikes.times.npy, spikes.clusters.npy, spikes.amps.npy, spikes.depths.npy",
      "maxLength": 1023
     },
     "filename_pattern": {
      "type": "string",
      "nullable": true,
      "description": "File name pattern (with wildcards) for this file in ALF naming convention. E.g. 'spikes.times.*' or '*.timestamps.*', or 'spikes.*.*' for a DataCollection, which would include all files starting with the word 'spikes'. NB: Case-insensitive matching.If null, the name field must match the object.attribute part of the filename.",
      "maxLength": 255
     }
    },
    "required": [
     "id"
    ]
   },
   "Download": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "user": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "dataset": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "count": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    },
    "required": [
     "dataset",
     "id",
     "user"
    ]
   },
   "FOV": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "imaging_type": {
      "type": "string",
      "description": "Long name"
     },
     "location": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/FOVLocationList"
      },
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "session": {
      "type": "string",
      "format": "uuid"
     },
     "stack": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     },
     "datasets": {
      "type": "array",
      "items": {
       "type": "string",
       "format": "uuid"
      }
     }
    },
    "required": [
     "id",
     "location",
     "name",
     "session"
    ]
   },
   "FOVLocationDetail": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "brain_region": {
      "type": "array",
      "items": {
       "type": "integer",
       "maximum": 2147483647,
       "minimum": -2147483648
      }
     },
     "coordinate_system": {
      "type": "string",
      "description": "Long name",
      "default": "IBL-Allen"
     },
     "provenance": {
      "$ref": "#/components/schemas/ProvenanceEnum"
     },
     "x": {
      "type": "array",
      "items": {}
     },
     "y": {
      "type": "array",
      "items": {}
     },
     "z": {
      "type": "array",
      "items": {}
     },
     "n_xyz": {
      "type": "array",
      "items": {}
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "default_provenance": {
      "type": "boolean"
     },
     "auto_datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "title": "Last update"
     },
     "field_of_view": {
      "type": "string",
      "format": "uuid"
     }
    },
    "required": [
     "auto_datetime",
     "field_of_view",
     "id",
     "n_xyz",
     "provenance",
     "x",
     "y",
     "z"
    ]
   },
   "FOVLocationList": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "brain_region": {
      "type": "array",
      "items": {
       "type": "integer",
       "maximum": 2147483647,
       "minimum": -2147483648
      }
     },
     "coordinate_system": {
      "type": "string",
      "description": "Long name",
      "default": "IBL-Allen"
     },
     "provenance": {
      "$ref": "#/components/schemas/ProvenanceEnum"
     },
     "x": {
      "type": "array",
      "items": {}
     },
     "y": {
      "type": "array",
      "items": {}
     },
     "z": {
      "type": "array",
      "items": {}
     },
     "n_xyz": {
      "type": "array",
      "items": {}
     },
     "default_provenance": {
      "type": "boolean"
     },
     "auto_datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "title": "Last update"
     }
    },
    "required": [
     "auto_datetime",
     "id",
     "n_xyz",
     "provenance",
     "x",
     "y",
     "z"
    ]
   },
   "FileRecord": {
    "type": "object",
    "properties": {
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "dataset": {
      "type": "string",
      "format": "uri"
     },
     "data_repository": {
      "type": "string"
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "relative_path": {
      "type": "string",
      "description": "path name within repository",
      "pattern": "^[a-zA-Z0-9\\_][^\\\\\\:]+$",
      "maxLength": 1000
     },
     "exists": {
      "type": "boolean",
      "description": "Whether the file exists in the data repository"
     }
    },
    "required": [
     "data_repository",
     "dataset",
     "relative_path",
     "url"
    ]
   },
   "ImagingStackDetail": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "slices": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/FOV"
      },
      "readOnly": true
     },
     "name": {
      "type": "string"
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    },
    "required": [
     "id",
     "name",
     "slices"
    ]
   },
   "ImagingStackList": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "slices": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/FOV"
      },
      "readOnly": true
     }
    },
    "required": [
     "id",
     "slices"
    ]
   },
   "Lab": {
    "type": "object",
    "properties": {
     "name": {
      "type": "string",
      "pattern": "^\\w+$",
      "maxLength": 255
     },
     "institution": {
      "type": "string",
      "maxLength": 255
     },
     "address": {
      "type": "string",
      "maxLength": 255
     },
     "timezone": {
      "type": "string",
      "description": "Timezone of the server (see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)",
      "maxLength": 64
     },
     "repositories": {
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "reference_weight_pct": {
      "type": "number",
      "format": "double",
      "description": "The minimum mouse weight is a linear combination of the reference weight and the zscore weight."
     },
     "zscore_weight_pct": {
      "type": "number",
      "format": "double",
      "description": "The minimum mouse weight is a linear combination of the reference weight and the zscore weight."
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    },
    "required": [
     "name"
    ]
   },
   "LabLocation": {
    "type": "object",
    "properties": {
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "lab": {
      "type": "string"
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    },
    "required": [
     "name"
    ]
   },
   "Note": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "user": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "date_time": {
      "type": "string",
      "format": "date-time"
     },
     "content_type": {
      "type": "string",
      "title": "Python model class name"
     },
     "object_id": {
      "type": "string",
      "format": "uuid",
      "description": "UUID, an object of content_type with this ID must already exist to attach a note."
     },
     "text": {
      "type": "string",
      "description": "String, content of the note or description of the image."
     },
     "image": {
      "type": "string",
      "format": "uri"
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    },
    "required": [
     "content_type",
     "id",
     "object_id",
     "user"
    ]
   },
   "OutcomeTypeEnum": {
    "enum": [
     "a",
     "r",
     "n"
    ],
    "type": "string",
    "description": "* `a` - Acute\n* `r` - Recovery\n* `n` - Non-recovery"
   },
   "PaginatedBrainRegionList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/BrainRegion"
      }
     }
    }
   },
   "PaginatedChannelList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Channel"
      }
     }
    }
   },
   "PaginatedChronicInsertionListList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ChronicInsertionList"
      }
     }
    }
   },
   "PaginatedDataFormatList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/DataFormat"
      }
     }
    }
   },
   "PaginatedDataRepositoryList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/DataRepository"
      }
     }
    }
   },
   "PaginatedDataRepositoryTypeList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/DataRepositoryType"
      }
     }
    }
   },
   "PaginatedDatasetList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Dataset"
      }
     }
    }
   },
   "PaginatedDatasetTypeList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/DatasetType"
      }
     }
    }
   },
   "PaginatedDownloadList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Download"
      }
     }
    }
   },
   "PaginatedFOVList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/FOV"
      }
     }
    }
   },
   "PaginatedFOVLocationListList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/FOVLocationList"
      }
     }
    }
   },
   "PaginatedFileRecordList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/FileRecord"
      }
     }
    }
   },
   "PaginatedImagingStackListList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ImagingStackList"
      }
     }
    }
   },
   "PaginatedLabList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Lab"
      }
     }
    }
   },
   "PaginatedLabLocationList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/LabLocation"
      }
     }
    }
   },
   "PaginatedNoteList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Note"
      }
     }
    }
   },
   "PaginatedProbeInsertionListList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ProbeInsertionList"
      }
     }
    }
   },
   "PaginatedProcedureTypeList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ProcedureType"
      }
     }
    }
   },
   "PaginatedProjectList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Project"
      }
     }
    }
   },
   "PaginatedRevisionList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Revision"
      }
     }
    }
   },
   "PaginatedSessionListList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SessionList"
      }
     }
    }
   },
   "PaginatedSubjectListList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubjectList"
      }
     }
    }
   },
   "PaginatedSurgeryList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Surgery"
      }
     }
    }
   },
   "PaginatedTagList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Tag"
      }
     }
    }
   },
   "PaginatedTaskList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Task"
      }
     }
    }
   },
   "PaginatedTrajectoryEstimateList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/TrajectoryEstimate"
      }
     }
    }
   },
   "PaginatedUserList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/User"
      }
     }
    }
   },
   "PaginatedWaterAdministrationDetailList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/WaterAdministrationDetail"
      }
     }
    }
   },
   "PaginatedWaterRestrictedSubjectListList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/WaterRestrictedSubjectList"
      }
     }
    }
   },
   "PaginatedWaterRestrictionListList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/WaterRestrictionList"
      }
     }
    }
   },
   "PaginatedWaterTypeDetailList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/WaterTypeDetail"
      }
     }
    }
   },
   "PaginatedWeighingDetailList": {
    "type": "object",
    "required": [
     "count",
     "results"
    ],
    "properties": {
     "count": {
      "type": "integer",
      "example": 123
     },
     "next": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=400&limit=100"
     },
     "previous": {
      "type": "string",
      "nullable": true,
      "format": "uri",
      "example": "http://api.example.org/accounts/?offset=200&limit=100"
     },
     "results": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/WeighingDetail"
      }
     }
    }
   },
   "PatchedBrainRegion": {
    "type": "object",
    "properties": {
     "id": {
      "type": "integer",
      "readOnly": true
     },
     "acronym": {
      "type": "string",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "readOnly": true
     },
     "description": {
      "type": "string",
      "nullable": true
     },
     "parent": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648,
      "readOnly": true
     },
     "related_descriptions": {
      "type": "string",
      "readOnly": true
     }
    }
   },
   "PatchedChannel": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "trajectory_estimate": {
      "type": "string",
      "format": "uuid"
     },
     "brain_region": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "axial": {
      "type": "number",
      "format": "double",
      "nullable": true,
      "description": "Distance in micrometers along the probe from the tip. 0 means the tip."
     },
     "lateral": {
      "type": "number",
      "format": "double",
      "nullable": true,
      "description": "Distance in micrometers across the probe"
     },
     "x": {
      "type": "number",
      "format": "double",
      "nullable": true,
      "title": "X-ml (um)",
      "description": "brain surface medio-lateral coordinate (um) ofthe insertion, right +, relative to Bregma"
     },
     "y": {
      "type": "number",
      "format": "double",
      "nullable": true,
      "title": "Y-ap (um)",
      "description": "brain surface antero-posterior coordinate (um) of the insertion, front +, relative to Bregma"
     },
     "z": {
      "type": "number",
      "format": "double",
      "nullable": true,
      "title": "Z-dv (um)",
      "description": "brain surface dorso-ventral coordinate (um) of the insertion, up +, relative to Bregma"
     }
    }
   },
   "PatchedChronicInsertionDetail": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules')."
     },
     "lab": {
      "type": "string"
     },
     "model": {
      "type": "string",
      "description": "manufacturer's part number e.g. A4x8-5mm-100-20"
     },
     "start_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "serial": {
      "type": "string",
      "description": "Probe serial number",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "probe_insertion": {
      "type": "string",
      "readOnly": true
     }
    }
   },
   "PatchedDataFormat": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "name": {
      "type": "string",
      "description": "short identifying name, e.g. 'npy'",
      "maxLength": 255
     },
     "description": {
      "type": "string",
      "description": "Human-readable description of the file format e.g. 'npy-formatted square numerical array'.",
      "maxLength": 255
     },
     "file_extension": {
      "type": "string",
      "description": "file extension, starting with a dot.",
      "pattern": "^\\.[^\\.]+$",
      "maxLength": 255
     },
     "matlab_loader_function": {
      "type": "string",
      "description": "Name of MATLAB loader function'.",
      "maxLength": 255
     },
     "python_loader_function": {
      "type": "string",
      "description": "Name of Python loader function'.",
      "maxLength": 255
     }
    }
   },
   "PatchedDataRepository": {
    "type": "object",
    "properties": {
     "name": {
      "type": "string",
      "maxLength": 255
     },
     "timezone": {
      "type": "string",
      "description": "Timezone of the server (see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)",
      "maxLength": 64
     },
     "globus_path": {
      "type": "string",
      "description": "absolute path to the repository on the server e.g. /mnt/something/",
      "maxLength": 1000
     },
     "hostname": {
      "type": "string",
      "description": "Host name of the network drive",
      "pattern": "^[a-zA-Z0-9\\.\\-\\_]+$",
      "maxLength": 200
     },
     "data_url": {
      "type": "string",
      "format": "uri",
      "nullable": true,
      "description": "URL of the data repository, if it is accessible via HTTP",
      "maxLength": 200
     },
     "repository_type": {
      "type": "string",
      "nullable": true
     },
     "globus_endpoint_id": {
      "type": "string",
      "format": "uuid",
      "nullable": true,
      "description": "UUID of the globus endpoint"
     },
     "globus_is_personal": {
      "type": "boolean",
      "nullable": true,
      "description": "whether the Globus endpoint is personal or not. By default, Globus cannot transfer a file between two personal endpoints."
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    }
   },
   "PatchedDataRepositoryType": {
    "type": "object",
    "properties": {
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "name": {
      "type": "string",
      "maxLength": 255
     }
    }
   },
   "PatchedDataset": {
    "type": "object",
    "properties": {
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "created_by": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "created_datetime": {
      "type": "string",
      "format": "date-time",
      "nullable": true,
      "description": "The creation datetime."
     },
     "dataset_type": {
      "type": "string",
      "description": "Short identifying nickname, e.g. 'spikes.times'"
     },
     "data_format": {
      "type": "string",
      "description": "short identifying name, e.g. 'npy'"
     },
     "collection": {
      "type": "string",
      "nullable": true
     },
     "session": {
      "type": "string",
      "format": "uri"
     },
     "file_size": {
      "type": "integer",
      "nullable": true
     },
     "hash": {
      "type": "string",
      "nullable": true
     },
     "version": {
      "type": "string",
      "nullable": true
     },
     "experiment_number": {
      "type": "string",
      "readOnly": true
     },
     "file_records": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/DatasetFileRecords"
      },
      "readOnly": true
     },
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules').",
      "writeOnly": true
     },
     "date": {
      "type": "string",
      "format": "date"
     },
     "number": {
      "type": "integer"
     },
     "auto_datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "nullable": true,
      "title": "Last updated"
     },
     "revision": {
      "type": "string",
      "description": "Long name"
     },
     "default_dataset": {
      "type": "boolean",
      "nullable": true
     },
     "protected": {
      "type": "string",
      "readOnly": true
     },
     "public": {
      "type": "string",
      "readOnly": true
     },
     "tags": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Long name"
      }
     },
     "qc": {
      "type": "string"
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    }
   },
   "PatchedDatasetType": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Short identifying nickname, e.g. 'spikes.times'",
      "maxLength": 255
     },
     "created_by": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
      "nullable": true
     },
     "description": {
      "type": "string",
      "description": "Human-readable description of data type. Should say what is in the file, and how to read it. For DataCollections, it should list what Datasets are expected in the the collection. E.g. 'Files related to spike events, including spikes.times.npy, spikes.clusters.npy, spikes.amps.npy, spikes.depths.npy",
      "maxLength": 1023
     },
     "filename_pattern": {
      "type": "string",
      "nullable": true,
      "description": "File name pattern (with wildcards) for this file in ALF naming convention. E.g. 'spikes.times.*' or '*.timestamps.*', or 'spikes.*.*' for a DataCollection, which would include all files starting with the word 'spikes'. NB: Case-insensitive matching.If null, the name field must match the object.attribute part of the filename.",
      "maxLength": 255
     }
    }
   },
   "PatchedDownload": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "user": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "dataset": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "count": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    }
   },
   "PatchedFOV": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "imaging_type": {
      "type": "string",
      "description": "Long name"
     },
     "location": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/FOVLocationList"
      },
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "session": {
      "type": "string",
      "format": "uuid"
     },
     "stack": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     },
     "datasets": {
      "type": "array",
      "items": {
       "type": "string",
       "format": "uuid"
      }
     }
    }
   },
   "PatchedFOVLocationDetail": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "brain_region": {
      "type": "array",
      "items": {
       "type": "integer",
       "maximum": 2147483647,
       "minimum": -2147483648
      }
     },
     "coordinate_system": {
      "type": "string",
      "description": "Long name",
      "default": "IBL-Allen"
     },
     "provenance": {
      "$ref": "#/components/schemas/ProvenanceEnum"
     },
     "x": {
      "type": "array",
      "items": {}
     },
     "y": {
      "type": "array",
      "items": {}
     },
     "z": {
      "type": "array",
      "items": {}
     },
     "n_xyz": {
      "type": "array",
      "items": {}
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "default_provenance": {
      "type": "boolean"
     },
     "auto_datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "title": "Last update"
     },
     "field_of_view": {
      "type": "string",
      "format": "uuid"
     }
    }
   },
   "PatchedFileRecord": {
    "type": "object",
    "properties": {
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "dataset": {
      "type": "string",
      "format": "uri"
     },
     "data_repository": {
      "type": "string"
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "relative_path": {
      "type": "string",
      "description": "path name within repository",
      "pattern": "^[a-zA-Z0-9\\_][^\\\\\\:]+$",
      "maxLength": 1000
     },
     "exists": {
      "type": "boolean",
      "description": "Whether the file exists in the data repository"
     }
    }
   },
   "PatchedLab": {
    "type": "object",
    "properties": {
     "name": {
      "type": "string",
      "pattern": "^\\w+$",
      "maxLength": 255
     },
     "institution": {
      "type": "string",
      "maxLength": 255
     },
     "address": {
      "type": "string",
      "maxLength": 255
     },
     "timezone": {
      "type": "string",
      "description": "Timezone of the server (see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)",
      "maxLength": 64
     },
     "repositories": {
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "reference_weight_pct": {
      "type": "number",
      "format": "double",
      "description": "The minimum mouse weight is a linear combination of the reference weight and the zscore weight."
     },
     "zscore_weight_pct": {
      "type": "number",
      "format": "double",
      "description": "The minimum mouse weight is a linear combination of the reference weight and the zscore weight."
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    }
   },
   "PatchedLabLocation": {
    "type": "object",
    "properties": {
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "lab": {
      "type": "string"
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    }
   },
   "PatchedNote": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "user": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "date_time": {
      "type": "string",
      "format": "date-time"
     },
     "content_type": {
      "type": "string",
      "title": "Python model class name"
     },
     "object_id": {
      "type": "string",
      "format": "uuid",
      "description": "UUID, an object of content_type with this ID must already exist to attach a note."
     },
     "text": {
      "type": "string",
      "description": "String, content of the note or description of the image."
     },
     "image": {
      "type": "string",
      "format": "uri"
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    }
   },
   "PatchedProbeInsertionDetail": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "session": {
      "type": "string",
      "format": "uuid"
     },
     "model": {
      "type": "string",
      "description": "manufacturer's part number e.g. A4x8-5mm-100-20"
     },
     "session_info": {
      "allOf": [
       {
        "$ref": "#/components/schemas/SessionList"
       }
      ],
      "readOnly": true
     },
     "datasets": {
      "type": "string",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "serial": {
      "type": "string",
      "description": "Probe serial number",
      "maxLength": 255
     },
     "auto_datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "nullable": true,
      "title": "Last updated"
     },
     "chronic_insertion": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     }
    }
   },
   "PatchedProject": {
    "type": "object",
    "properties": {
     "name": {
      "type": "string",
      "maxLength": 255
     },
     "description": {
      "type": "string",
      "description": "Description of the project",
      "maxLength": 1023
     },
     "users": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
      }
     }
    }
   },
   "PatchedRevision": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "pattern": "^[\\w.-]+$",
      "maxLength": 255
     },
     "description": {
      "type": "string",
      "maxLength": 1023
     },
     "created_datetime": {
      "type": "string",
      "format": "date-time",
      "nullable": true,
      "description": "created date"
     }
    }
   },
   "PatchedSessionDetail": {
    "type": "object",
    "properties": {
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules')."
     },
     "users": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
      }
     },
     "location": {
      "type": "string",
      "description": "Long name",
      "nullable": true
     },
     "procedures": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Long name",
       "nullable": true
      }
     },
     "lab": {
      "type": "string"
     },
     "projects": {
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "type": {
      "type": "string",
      "nullable": true,
      "description": "User-defined session type (e.g. Base, Experiment)",
      "maxLength": 255
     },
     "task_protocol": {
      "type": "string",
      "maxLength": 1023
     },
     "number": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648,
      "nullable": true,
      "description": "Optional session number for this level"
     },
     "start_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "end_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "narrative": {
      "type": "string"
     },
     "parent_session": {
      "type": "string",
      "format": "uri",
      "nullable": true,
      "description": "Hierarchical parent to this session"
     },
     "n_correct_trials": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648,
      "nullable": true
     },
     "n_trials": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648,
      "nullable": true
     },
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "extended_qc": {
      "nullable": true,
      "description": "Structured data about session QC, formatted in a user-defined way"
     },
     "qc": {
      "type": "string"
     },
     "wateradmin_session_related": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SessionWaterAdmin"
      },
      "readOnly": true
     },
     "data_dataset_session_related": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SessionDatasets"
      },
      "readOnly": true
     },
     "auto_datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "nullable": true,
      "title": "Last updated"
     },
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "probe_insertion": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ProbeInsertionList"
      },
      "readOnly": true
     },
     "field_of_view": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/FOV"
      },
      "readOnly": true
     },
     "notes": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Note"
      },
      "readOnly": true
     }
    }
   },
   "PatchedSubjectDetail": {
    "type": "object",
    "properties": {
     "nickname": {
      "type": "string",
      "default": "-",
      "description": "Easy-to-remember name (e.g. 'Hercules').",
      "pattern": "^[\\w.-]+$",
      "maxLength": 64
     },
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "responsible_user": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "birth_date": {
      "type": "string",
      "format": "date",
      "nullable": true
     },
     "age_weeks": {
      "type": "string",
      "readOnly": true
     },
     "death_date": {
      "type": "string",
      "format": "date",
      "nullable": true
     },
     "species": {
      "type": "string",
      "description": "common name, e.g. \"mouse\"",
      "nullable": true
     },
     "sex": {
      "oneOf": [
       {
        "$ref": "#/components/schemas/SexEnum"
       },
       {
        "$ref": "#/components/schemas/BlankEnum"
       }
      ]
     },
     "litter": {
      "type": "string",
      "description": "Long name",
      "nullable": true
     },
     "strain": {
      "type": "string",
      "description": "Standard descriptive name E.g. \"C57BL/6J\", http://www.informatics.jax.org/mgihome/nomen/",
      "nullable": true
     },
     "source": {
      "type": "string",
      "description": "Long name",
      "nullable": true
     },
     "line": {
      "type": "string",
      "description": "Long name",
      "nullable": true
     },
     "projects": {
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "session_projects": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "readOnly": true
     },
     "lab": {
      "type": "string"
     },
     "genotype": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ZygosityList"
      },
      "readOnly": true
     },
     "description": {
      "type": "string"
     },
     "alive": {
      "type": "string",
      "readOnly": true
     },
     "reference_weight": {
      "type": "string",
      "readOnly": true
     },
     "last_water_restriction": {
      "type": "string",
      "readOnly": true
     },
     "expected_water": {
      "type": "string",
      "readOnly": true
     },
     "remaining_water": {
      "type": "string",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "weighings": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/WeighingDetail"
      },
      "readOnly": true
     },
     "water_administrations": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/WaterAdministrationDetail"
      },
      "readOnly": true
     }
    }
   },
   "PatchedSurgery": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules')."
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "narrative": {
      "type": "string"
     },
     "start_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "end_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "outcome_type": {
      "oneOf": [
       {
        "$ref": "#/components/schemas/OutcomeTypeEnum"
       },
       {
        "$ref": "#/components/schemas/BlankEnum"
       }
      ]
     },
     "implant_weight": {
      "type": "number",
      "format": "double",
      "minimum": 0,
      "description": "Implant weight in grams"
     },
     "lab": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     },
     "location": {
      "type": "string",
      "format": "uuid",
      "nullable": true,
      "description": "The physical location at which the surgery was performed"
     },
     "users": {
      "type": "array",
      "items": {
       "type": "string",
       "format": "uuid"
      },
      "description": "The user(s) involved in this action"
     },
     "procedures": {
      "type": "array",
      "items": {
       "type": "string",
       "format": "uuid"
      },
      "description": "The procedure(s) performed"
     }
    }
   },
   "PatchedTag": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "description": {
      "type": "string",
      "maxLength": 1023
     },
     "protected": {
      "type": "boolean"
     },
     "public": {
      "type": "boolean"
     },
     "hash": {
      "type": "string",
      "nullable": true,
      "description": "Hash of the data buffer, SHA-1 is 40 hex chars, while md5is 32 hex chars",
      "maxLength": 64
     }
    }
   },
   "PatchedTask": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "parents": {
      "type": "array",
      "items": {
       "type": "string",
       "format": "uuid"
      }
     },
     "session": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     },
     "data_repository": {
      "type": "string"
     },
     "status": {
      "type": "string"
     },
     "name": {
      "type": "string",
      "nullable": true,
      "maxLength": 64
     },
     "priority": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "io_charge": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "level": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "gpu": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "cpu": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "ram": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "time_out_secs": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "time_elapsed_secs": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "executable": {
      "type": "string",
      "nullable": true,
      "description": "Usually the Python class name on the workers",
      "maxLength": 128
     },
     "graph": {
      "type": "string",
      "nullable": true,
      "description": "The name of the graph containing a set of related and possibly dependent tasks",
      "maxLength": 64
     },
     "log": {
      "type": "string",
      "nullable": true
     },
     "version": {
      "type": "string",
      "nullable": true,
      "description": "version of the algorithm generating the file",
      "maxLength": 64
     },
     "datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true
     },
     "arguments": {
      "nullable": true,
      "description": "dictionary of input arguments"
     }
    }
   },
   "PatchedTrajectoryEstimate": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "probe_insertion": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     },
     "x": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "y": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "z": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "depth": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "theta": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "phi": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "roll": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "provenance": {
      "type": "string"
     },
     "session": {
      "allOf": [
       {
        "$ref": "#/components/schemas/SessionList"
       }
      ],
      "readOnly": true
     },
     "probe_name": {
      "type": "string",
      "readOnly": true
     },
     "coordinate_system": {
      "type": "string",
      "description": "Long name"
     },
     "datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "title": "Last update"
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "chronic_insertion": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     }
    }
   },
   "PatchedUser": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "username": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
      "pattern": "^[\\w.@+-]+$",
      "maxLength": 150
     },
     "email": {
      "type": "string",
      "format": "email",
      "title": "Email address",
      "maxLength": 254
     },
     "subjects_responsible": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Easy-to-remember name (e.g. 'Hercules')."
      }
     },
     "lab": {
      "type": "string",
      "readOnly": true
     },
     "allowed_users": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
      }
     },
     "is_stock_manager": {
      "type": "boolean"
     }
    }
   },
   "PatchedWaterAdministrationDetail": {
    "type": "object",
    "properties": {
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules')."
     },
     "date_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "water_administered": {
      "type": "number",
      "format": "double",
      "minimum": 0,
      "nullable": true,
      "description": "Water administered, in milliliters"
     },
     "water_type": {
      "type": "string"
     },
     "user": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "session": {
      "type": "string",
      "format": "uuid"
     },
     "adlib": {
      "type": "boolean"
     }
    }
   },
   "ProbeInsertionDetail": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "session": {
      "type": "string",
      "format": "uuid"
     },
     "model": {
      "type": "string",
      "description": "manufacturer's part number e.g. A4x8-5mm-100-20"
     },
     "session_info": {
      "allOf": [
       {
        "$ref": "#/components/schemas/SessionList"
       }
      ],
      "readOnly": true
     },
     "datasets": {
      "type": "string",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "serial": {
      "type": "string",
      "description": "Probe serial number",
      "maxLength": 255
     },
     "auto_datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "nullable": true,
      "title": "Last updated"
     },
     "chronic_insertion": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     }
    },
    "required": [
     "auto_datetime",
     "datasets",
     "id",
     "name",
     "session_info"
    ]
   },
   "ProbeInsertionList": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "session": {
      "type": "string",
      "format": "uuid"
     },
     "model": {
      "type": "string",
      "description": "manufacturer's part number e.g. A4x8-5mm-100-20"
     },
     "session_info": {
      "allOf": [
       {
        "$ref": "#/components/schemas/SessionList"
       }
      ],
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "serial": {
      "type": "string",
      "description": "Probe serial number",
      "maxLength": 255
     },
     "auto_datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "nullable": true,
      "title": "Last updated"
     },
     "chronic_insertion": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     },
     "datasets": {
      "type": "array",
      "items": {
       "type": "string",
       "format": "uuid"
      }
     }
    },
    "required": [
     "auto_datetime",
     "id",
     "name",
     "session_info"
    ]
   },
   "ProcedureType": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "description": {
      "type": "string",
      "description": "Detailed description of the procedure"
     }
    },
    "required": [
     "id",
     "name"
    ]
   },
   "Project": {
    "type": "object",
    "properties": {
     "name": {
      "type": "string",
      "maxLength": 255
     },
     "description": {
      "type": "string",
      "description": "Description of the project",
      "maxLength": 1023
     },
     "users": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
      }
     }
    },
    "required": [
     "name"
    ]
   },
   "ProvenanceEnum": {
    "enum": [
     "E",
     "F",
     "L",
     "H"
    ],
    "type": "string",
    "description": "* `E` - E\n* `F` - F\n* `L` - L\n* `H` - H"
   },
   "Revision": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "pattern": "^[\\w.-]+$",
      "maxLength": 255
     },
     "description": {
      "type": "string",
      "maxLength": 1023
     },
     "created_datetime": {
      "type": "string",
      "format": "date-time",
      "nullable": true,
      "description": "created date"
     }
    },
    "required": [
     "id"
    ]
   },
   "SessionDatasets": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "dataset_type": {
      "type": "string",
      "description": "Short identifying nickname, e.g. 'spikes.times'"
     },
     "data_url": {
      "type": "string",
      "readOnly": true
     },
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "file_size": {
      "type": "integer",
      "maximum": 9223372036854775807,
      "minimum": -9223372036854775808,
      "format": "int64",
      "nullable": true,
      "description": "Size in bytes"
     },
     "hash": {
      "type": "string",
      "description": "Hash of the data buffer, SHA-1 is 40 hex chars, while md5is 32 hex chars",
      "maxLength": 64
     },
     "version": {
      "type": "string",
      "description": "version of the algorithm generating the file",
      "maxLength": 64
     },
     "collection": {
      "type": "string",
      "description": "file subcollection or subfolder",
      "pattern": "^[\\w./-]+$",
      "maxLength": 255
     },
     "revision": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     },
     "default_revision": {
      "type": "string"
     },
     "qc": {
      "type": "string"
     }
    },
    "required": [
     "data_url",
     "dataset_type",
     "default_revision",
     "id",
     "name",
     "url"
    ]
   },
   "SessionDetail": {
    "type": "object",
    "properties": {
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules')."
     },
     "users": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
      }
     },
     "location": {
      "type": "string",
      "description": "Long name",
      "nullable": true
     },
     "procedures": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Long name",
       "nullable": true
      }
     },
     "lab": {
      "type": "string"
     },
     "projects": {
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "type": {
      "type": "string",
      "nullable": true,
      "description": "User-defined session type (e.g. Base, Experiment)",
      "maxLength": 255
     },
     "task_protocol": {
      "type": "string",
      "maxLength": 1023
     },
     "number": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648,
      "nullable": true,
      "description": "Optional session number for this level"
     },
     "start_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "end_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "narrative": {
      "type": "string"
     },
     "parent_session": {
      "type": "string",
      "format": "uri",
      "nullable": true,
      "description": "Hierarchical parent to this session"
     },
     "n_correct_trials": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648,
      "nullable": true
     },
     "n_trials": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648,
      "nullable": true
     },
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "extended_qc": {
      "nullable": true,
      "description": "Structured data about session QC, formatted in a user-defined way"
     },
     "qc": {
      "type": "string"
     },
     "wateradmin_session_related": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SessionWaterAdmin"
      },
      "readOnly": true
     },
     "data_dataset_session_related": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SessionDatasets"
      },
      "readOnly": true
     },
     "auto_datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "nullable": true,
      "title": "Last updated"
     },
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "probe_insertion": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ProbeInsertionList"
      },
      "readOnly": true
     },
     "field_of_view": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/FOV"
      },
      "readOnly": true
     },
     "notes": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Note"
      },
      "readOnly": true
     }
    },
    "required": [
     "auto_datetime",
     "data_dataset_session_related",
     "field_of_view",
     "id",
     "notes",
     "probe_insertion",
     "subject",
     "url",
     "wateradmin_session_related"
    ]
   },
   "SessionList": {
    "type": "object",
    "description": "Session model serializer within ProbeInsertion and ChronicProbeInsertion serializers.",
    "properties": {
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules').",
      "readOnly": true
     },
     "start_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "number": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": -2147483648,
      "nullable": true,
      "description": "Optional session number for this level"
     },
     "lab": {
      "type": "string",
      "readOnly": true
     },
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "projects": {
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "task_protocol": {
      "type": "string",
      "maxLength": 1023
     }
    },
    "required": [
     "id",
     "lab",
     "projects",
     "subject"
    ]
   },
   "SessionWaterAdmin": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "water_type": {
      "type": "string"
     },
     "water_administered": {
      "type": "number",
      "format": "double",
      "minimum": 0,
      "nullable": true,
      "description": "Water administered, in milliliters"
     }
    },
    "required": [
     "id"
    ]
   },
   "SexEnum": {
    "enum": [
     "M",
     "F",
     "U"
    ],
    "type": "string",
    "description": "* `M` - Male\n* `F` - Female\n* `U` - Unknown"
   },
   "SubjectDetail": {
    "type": "object",
    "properties": {
     "nickname": {
      "type": "string",
      "default": "-",
      "description": "Easy-to-remember name (e.g. 'Hercules').",
      "pattern": "^[\\w.-]+$",
      "maxLength": 64
     },
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "responsible_user": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "birth_date": {
      "type": "string",
      "format": "date",
      "nullable": true
     },
     "age_weeks": {
      "type": "string",
      "readOnly": true
     },
     "death_date": {
      "type": "string",
      "format": "date",
      "nullable": true
     },
     "species": {
      "type": "string",
      "description": "common name, e.g. \"mouse\"",
      "nullable": true
     },
     "sex": {
      "oneOf": [
       {
        "$ref": "#/components/schemas/SexEnum"
       },
       {
        "$ref": "#/components/schemas/BlankEnum"
       }
      ]
     },
     "litter": {
      "type": "string",
      "description": "Long name",
      "nullable": true
     },
     "strain": {
      "type": "string",
      "description": "Standard descriptive name E.g. \"C57BL/6J\", http://www.informatics.jax.org/mgihome/nomen/",
      "nullable": true
     },
     "source": {
      "type": "string",
      "description": "Long name",
      "nullable": true
     },
     "line": {
      "type": "string",
      "description": "Long name",
      "nullable": true
     },
     "projects": {
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "session_projects": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "readOnly": true
     },
     "lab": {
      "type": "string"
     },
     "genotype": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ZygosityList"
      },
      "readOnly": true
     },
     "description": {
      "type": "string"
     },
     "alive": {
      "type": "string",
      "readOnly": true
     },
     "reference_weight": {
      "type": "string",
      "readOnly": true
     },
     "last_water_restriction": {
      "type": "string",
      "readOnly": true
     },
     "expected_water": {
      "type": "string",
      "readOnly": true
     },
     "remaining_water": {
      "type": "string",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "weighings": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/WeighingDetail"
      },
      "readOnly": true
     },
     "water_administrations": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/WaterAdministrationDetail"
      },
      "readOnly": true
     }
    },
    "required": [
     "age_weeks",
     "alive",
     "expected_water",
     "genotype",
     "id",
     "lab",
     "last_water_restriction",
     "reference_weight",
     "remaining_water",
     "session_projects",
     "url",
     "water_administrations",
     "weighings"
    ]
   },
   "SubjectList": {
    "type": "object",
    "properties": {
     "nickname": {
      "type": "string",
      "default": "-",
      "description": "Easy-to-remember name (e.g. 'Hercules').",
      "pattern": "^[\\w.-]+$",
      "maxLength": 64
     },
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "responsible_user": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "birth_date": {
      "type": "string",
      "format": "date",
      "nullable": true
     },
     "age_weeks": {
      "type": "string",
      "readOnly": true
     },
     "death_date": {
      "type": "string",
      "format": "date",
      "nullable": true
     },
     "species": {
      "type": "string",
      "description": "common name, e.g. \"mouse\"",
      "nullable": true
     },
     "sex": {
      "oneOf": [
       {
        "$ref": "#/components/schemas/SexEnum"
       },
       {
        "$ref": "#/components/schemas/BlankEnum"
       }
      ]
     },
     "litter": {
      "type": "string",
      "description": "Long name",
      "nullable": true
     },
     "strain": {
      "type": "string",
      "description": "Standard descriptive name E.g. \"C57BL/6J\", http://www.informatics.jax.org/mgihome/nomen/",
      "nullable": true
     },
     "source": {
      "type": "string",
      "description": "Long name",
      "nullable": true
     },
     "line": {
      "type": "string",
      "description": "Long name",
      "nullable": true
     },
     "projects": {
      "type": "array",
      "items": {
       "type": "string"
      }
     },
     "session_projects": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "readOnly": true
     },
     "lab": {
      "type": "string"
     },
     "genotype": {
      "type": "array",
      "items": {}
     },
     "description": {
      "type": "string"
     },
     "alive": {
      "type": "string",
      "readOnly": true
     },
     "reference_weight": {
      "type": "string",
      "readOnly": true
     },
     "last_water_restriction": {
      "type": "string",
      "readOnly": true
     },
     "expected_water": {
      "type": "string",
      "readOnly": true
     },
     "remaining_water": {
      "type": "string",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     }
    },
    "required": [
     "age_weeks",
     "alive",
     "expected_water",
     "id",
     "lab",
     "last_water_restriction",
     "reference_weight",
     "remaining_water",
     "session_projects",
     "url"
    ]
   },
   "Surgery": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules')."
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "narrative": {
      "type": "string"
     },
     "start_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "end_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "outcome_type": {
      "oneOf": [
       {
        "$ref": "#/components/schemas/OutcomeTypeEnum"
       },
       {
        "$ref": "#/components/schemas/BlankEnum"
       }
      ]
     },
     "implant_weight": {
      "type": "number",
      "format": "double",
      "minimum": 0,
      "description": "Implant weight in grams"
     },
     "lab": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     },
     "location": {
      "type": "string",
      "format": "uuid",
      "nullable": true,
      "description": "The physical location at which the surgery was performed"
     },
     "users": {
      "type": "array",
      "items": {
       "type": "string",
       "format": "uuid"
      },
      "description": "The user(s) involved in this action"
     },
     "procedures": {
      "type": "array",
      "items": {
       "type": "string",
       "format": "uuid"
      },
      "description": "The procedure(s) performed"
     }
    },
    "required": [
     "id",
     "implant_weight",
     "subject"
    ]
   },
   "Tag": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "name": {
      "type": "string",
      "description": "Long name",
      "maxLength": 255
     },
     "description": {
      "type": "string",
      "maxLength": 1023
     },
     "protected": {
      "type": "boolean"
     },
     "public": {
      "type": "boolean"
     },
     "hash": {
      "type": "string",
      "nullable": true,
      "description": "Hash of the data buffer, SHA-1 is 40 hex chars, while md5is 32 hex chars",
      "maxLength": 64
     }
    },
    "required": [
     "id"
    ]
   },
   "Task": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "parents": {
      "type": "array",
      "items": {
       "type": "string",
       "format": "uuid"
      }
     },
     "session": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     },
     "data_repository": {
      "type": "string"
     },
     "status": {
      "type": "string"
     },
     "name": {
      "type": "string",
      "nullable": true,
      "maxLength": 64
     },
     "priority": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "io_charge": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "level": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "gpu": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "cpu": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "ram": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "time_out_secs": {
      "type": "integer",
      "maximum": 32767,
      "minimum": -32768,
      "nullable": true
     },
     "time_elapsed_secs": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "executable": {
      "type": "string",
      "nullable": true,
      "description": "Usually the Python class name on the workers",
      "maxLength": 128
     },
     "graph": {
      "type": "string",
      "nullable": true,
      "description": "The name of the graph containing a set of related and possibly dependent tasks",
      "maxLength": 64
     },
     "log": {
      "type": "string",
      "nullable": true
     },
     "version": {
      "type": "string",
      "nullable": true,
      "description": "version of the algorithm generating the file",
      "maxLength": 64
     },
     "datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true
     },
     "arguments": {
      "nullable": true,
      "description": "dictionary of input arguments"
     }
    },
    "required": [
     "datetime",
     "id"
    ]
   },
   "TrajectoryEstimate": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "probe_insertion": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     },
     "x": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "y": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "z": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "depth": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "theta": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "phi": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "roll": {
      "type": "number",
      "format": "double",
      "nullable": true
     },
     "provenance": {
      "type": "string"
     },
     "session": {
      "allOf": [
       {
        "$ref": "#/components/schemas/SessionList"
       }
      ],
      "readOnly": true
     },
     "probe_name": {
      "type": "string",
      "readOnly": true
     },
     "coordinate_system": {
      "type": "string",
      "description": "Long name"
     },
     "datetime": {
      "type": "string",
      "format": "date-time",
      "readOnly": true,
      "title": "Last update"
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "chronic_insertion": {
      "type": "string",
      "format": "uuid",
      "nullable": true
     }
    },
    "required": [
     "datetime",
     "depth",
     "id",
     "phi",
     "probe_name",
     "provenance",
     "session",
     "theta",
     "x",
     "y"
    ]
   },
   "User": {
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "format": "uuid",
      "readOnly": true
     },
     "username": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
      "pattern": "^[\\w.@+-]+$",
      "maxLength": 150
     },
     "email": {
      "type": "string",
      "format": "email",
      "title": "Email address",
      "maxLength": 254
     },
     "subjects_responsible": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Easy-to-remember name (e.g. 'Hercules')."
      }
     },
     "lab": {
      "type": "string",
      "readOnly": true
     },
     "allowed_users": {
      "type": "array",
      "items": {
       "type": "string",
       "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
      }
     },
     "is_stock_manager": {
      "type": "boolean"
     }
    },
    "required": [
     "allowed_users",
     "id",
     "lab",
     "subjects_responsible",
     "username"
    ]
   },
   "WaterAdministrationDetail": {
    "type": "object",
    "properties": {
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules')."
     },
     "date_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "water_administered": {
      "type": "number",
      "format": "double",
      "minimum": 0,
      "nullable": true,
      "description": "Water administered, in milliliters"
     },
     "water_type": {
      "type": "string"
     },
     "user": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "session": {
      "type": "string",
      "format": "uuid"
     },
     "adlib": {
      "type": "boolean"
     }
    },
    "required": [
     "subject",
     "url"
    ]
   },
   "WaterRestrictedSubjectList": {
    "type": "object",
    "properties": {
     "nickname": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules').",
      "pattern": "^[\\w.-]+$",
      "maxLength": 64
     },
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "expected_water": {
      "type": "string",
      "readOnly": true
     },
     "remaining_water": {
      "type": "string",
      "readOnly": true
     },
     "reference_weight": {
      "type": "string",
      "readOnly": true
     },
     "last_water_restriction": {
      "type": "string",
      "readOnly": true
     },
     "reference_weight_pct": {
      "type": "string",
      "readOnly": true
     },
     "zscore_weight_pct": {
      "type": "string",
      "readOnly": true
     }
    },
    "required": [
     "expected_water",
     "last_water_restriction",
     "reference_weight",
     "reference_weight_pct",
     "remaining_water",
     "url",
     "zscore_weight_pct"
    ]
   },
   "WaterRestrictionList": {
    "type": "object",
    "properties": {
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules').",
      "readOnly": true
     },
     "start_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "end_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "water_type": {
      "type": "string",
      "readOnly": true
     },
     "reference_weight": {
      "type": "number",
      "format": "double",
      "minimum": 0,
      "description": "Weight in grams"
     }
    },
    "required": [
     "subject",
     "water_type"
    ]
   },
   "WaterTypeDetail": {
    "type": "object",
    "properties": {
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     },
     "json": {
      "nullable": true,
      "description": "Structured data, formatted in a user-defined way"
     },
     "name": {
      "type": "string",
      "maxLength": 128
     }
    },
    "required": [
     "name",
     "url"
    ]
   },
   "WeighingDetail": {
    "type": "object",
    "properties": {
     "subject": {
      "type": "string",
      "description": "Easy-to-remember name (e.g. 'Hercules')."
     },
     "date_time": {
      "type": "string",
      "format": "date-time",
      "nullable": true
     },
     "weight": {
      "type": "number",
      "format": "double",
      "minimum": 0,
      "description": "Weight in grams"
     },
     "user": {
      "type": "string",
      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
     },
     "url": {
      "type": "string",
      "format": "uri",
      "readOnly": true
     }
    },
    "required": [
     "subject",
     "url",
     "weight"
    ]
   },
   "ZygosityEnum": {
    "enum": [
     0,
     1,
     2,
     3
    ],
    "type": "integer",
    "description": "* `0` - Absent\n* `1` - Heterozygous\n* `2` - Homozygous\n* `3` - Present"
   },
   "ZygosityList": {
    "type": "object",
    "properties": {
     "allele": {
      "type": "string",
      "description": "informal name in lab, e.g. Pvalb-Cre"
     },
     "zygosity": {
      "$ref": "#/components/schemas/ZygosityEnum"
     }
    },
    "required": [
     "zygosity"
    ]
   }
  },
  "securitySchemes": {
   "cookieAuth": {
    "type": "apiKey",
    "in": "cookie",
    "name": "sessionid"
   },
   "tokenAuth": {
    "type": "apiKey",
    "in": "header",
    "name": "Authorization",
    "description": "Token-based authentication with required prefix \"Token\""
   }
  }
 }
}