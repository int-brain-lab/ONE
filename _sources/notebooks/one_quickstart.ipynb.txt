{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# ONE Quick Start\n",
    "This tutorial will get you started searching and loading IBL data using Open Neurophysiology\n",
    "Environment (ONE).\n",
    "\n",
    "First we need to install ONE. If you don't already have IBL libraries, the easiest way is to run\n",
    " `pip install ONE-api`.\n",
    "\n",
    "Now we need to import the ONE library and open a connection to the IBL public data server. To do\n",
    "so, we create an ONE object, and ask it to connect to the IBL public server.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "Info.\n",
    "\n",
    "IBL internal users may use their Alyx credentials to access all IBL data.\n",
    "[Click here](../one_installation.html#connecting-to-specific-database-relevant-for-ibl-users) for details.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [],
   "source": [
    "from one.api import ONE\n",
    "one = ONE(base_url='https://openalyx.internationalbrainlab.org', password='international', silent=True)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Now we are going to search for an experiment to analyze. First let's find out what we can search by:"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('dataset', 'date_range', 'laboratory', 'number', 'project', 'subject', 'task_protocol')\n"
     ]
    }
   ],
   "source": [
    "print(one.search_terms())"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Let's search for sessions recorded in September 2020, which contain a dataset 'spikes.times',\n",
    "meaning that electrophysiology was recorded. By adding the argument `details=True`, we get two\n",
    "outputs - the experiment IDs uniquely identifying these sessions, and some information about the\n",
    "experiments."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['4ecb5d24-f5cc-402c-be28-9d0f7cb14b3a', 'c7bd79c9-c47e-4ea5-aea3-74dda991b48e']\n",
      "[{'date': datetime.date(2020, 9, 21),\n",
      "  'lab': 'hoferlab',\n",
      "  'number': 1,\n",
      "  'project': 'ibl_neuropixel_brainwide_01',\n",
      "  'subject': 'SWC_043',\n",
      "  'task_protocol': '_iblrig_tasks_ephysChoiceWorld6.4.2'},\n",
      " {'date': datetime.date(2020, 9, 19),\n",
      "  'lab': 'zadorlab',\n",
      "  'number': 1,\n",
      "  'project': 'ibl_neuropixel_brainwide_01',\n",
      "  'subject': 'CSH_ZAD_029',\n",
      "  'task_protocol': '_iblrig_tasks_ephysChoiceWorld6.4.2'}]\n"
     ]
    }
   ],
   "source": [
    "eids, info = one.search(date_range=['2020-09-01', '2021-09-30'], dataset='spikes.times', details=True)\n",
    "\n",
    "from pprint import pprint\n",
    "pprint(eids)\n",
    "pprint(info)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "So there were two experiments matching the criteria in the public database. Now let's see all the\n",
    "datasets associated with the first of these experiments. The command `one.list_datasets` command\n",
    "returns the full path of all datasets, including the collection name and the extension. The 'alf'\n",
    "collection contains the preprocessed data we usually want to work with, so let's show only that\n",
    "and sub-collections of it:"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "outputs": [
    {
     "data": {
      "text/plain": "['alf/_ibl_bodyCamera.dlc.pqt',\n 'alf/_ibl_bodyCamera.times.npy',\n 'alf/_ibl_leftCamera.dlc.pqt',\n 'alf/_ibl_leftCamera.times.npy',\n 'alf/_ibl_passiveGabor.table.csv',\n 'alf/_ibl_passivePeriods.intervalsTable.csv',\n 'alf/_ibl_passiveRFM.times.npy',\n 'alf/_ibl_passiveStims.table.csv',\n 'alf/_ibl_rightCamera.dlc.pqt',\n 'alf/_ibl_rightCamera.times.npy',\n 'alf/_ibl_trials.choice.npy',\n 'alf/_ibl_trials.contrastLeft.npy',\n 'alf/_ibl_trials.contrastRight.npy',\n 'alf/_ibl_trials.feedbackType.npy',\n 'alf/_ibl_trials.feedback_times.npy',\n 'alf/_ibl_trials.firstMovement_times.npy',\n 'alf/_ibl_trials.goCueTrigger_times.npy',\n 'alf/_ibl_trials.goCue_times.npy',\n 'alf/_ibl_trials.intervals.npy',\n 'alf/_ibl_trials.intervals_bpod.npy',\n 'alf/_ibl_trials.probabilityLeft.npy',\n 'alf/_ibl_trials.response_times.npy',\n 'alf/_ibl_trials.rewardVolume.npy',\n 'alf/_ibl_trials.stimOff_times.npy',\n 'alf/_ibl_trials.stimOn_times.npy',\n 'alf/_ibl_wheel.position.npy',\n 'alf/_ibl_wheel.timestamps.npy',\n 'alf/_ibl_wheelMoves.intervals.npy',\n 'alf/_ibl_wheelMoves.peakAmplitude.npy',\n 'alf/probe00/_kilosort_whitening.matrix.npy',\n 'alf/probe00/_phy_spikes_subset.channels.npy',\n 'alf/probe00/_phy_spikes_subset.spikes.npy',\n 'alf/probe00/_phy_spikes_subset.waveforms.npy',\n 'alf/probe00/channels.localCoordinates.npy',\n 'alf/probe00/channels.rawInd.npy',\n 'alf/probe00/clusters.amps.npy',\n 'alf/probe00/clusters.channels.npy',\n 'alf/probe00/clusters.depths.npy',\n 'alf/probe00/clusters.metrics.pqt',\n 'alf/probe00/clusters.peakToTrough.npy',\n 'alf/probe00/clusters.uuids.csv',\n 'alf/probe00/clusters.waveforms.npy',\n 'alf/probe00/clusters.waveformsChannels.npy',\n 'alf/probe00/spikes.amps.npy',\n 'alf/probe00/spikes.clusters.npy',\n 'alf/probe00/spikes.depths.npy',\n 'alf/probe00/spikes.samples.npy',\n 'alf/probe00/spikes.templates.npy',\n 'alf/probe00/spikes.times.npy',\n 'alf/probe00/templates.amps.npy',\n 'alf/probe00/templates.waveforms.npy',\n 'alf/probe00/templates.waveformsChannels.npy',\n 'alf/probes.description.json',\n 'alf/probes.trajectory.json']"
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one.list_datasets(eids[0], collection='alf*')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Now let's load the electrophysiology information. There are two ways to do this.\n",
    "`one.load_dataset` returns a single dataset as a numeric array; `one.load_object` returns all the\n",
    "datasets with the same name part, as an object. Let's use the first method to load the spike times,\n",
    "cluster assignments, and amplitudes for probe00:"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "outputs": [],
   "source": [
    "spikes = one.load_object(eids[0], 'spikes',\n",
    "                         collection='alf/probe00', attribute=['times', 'clusters', 'amps'])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "And now let's make a plot of amplitude vs time for one of the spike clusters"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "mySpikes = (spikes.clusters == 1)\n",
    "plt.plot(spikes.times[mySpikes], spikes.amps[mySpikes], '.');"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "And that's the end of the quick start tutorial! For more information on any of these commands you\n",
    "can use the standard help function:"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on method list_datasets in module one.api:\n",
      "\n",
      "list_datasets(eid=None, collection=None, filename=None, revision=None, details=False, query_type=None) -> Union[numpy.ndarray, pandas.core.frame.DataFrame] method of one.api.OneAlyx instance\n",
      "    Given an eid, return the datasets for those sessions.  If no eid is provided,\n",
      "    a list of all datasets is returned.  When details is false, a sorted array of unique\n",
      "    datasets is returned (their relative paths).\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    eid : str, UUID, pathlib.Path, dict\n",
      "        Experiment session identifier; may be a UUID, URL, experiment reference string\n",
      "        details dict or Path.\n",
      "    collection : str\n",
      "        The collection to which the object belongs, e.g. 'alf/probe01'.\n",
      "        This is the relative path of the file from the session root.\n",
      "        Supports asterisks as wildcards.\n",
      "    filename : str\n",
      "        Filters datasets and returns only the ones matching the filename\n",
      "        Supports asterisks as wildcards\n",
      "    revision : str\n",
      "        Filters datasets and returns only the ones matching the revision\n",
      "        Supports asterisks as wildcards\n",
      "    details : bool\n",
      "        When true, a pandas DataFrame is returned, otherwise a numpy array of\n",
      "        relative paths (collection/revision/filename) - see one.alf.spec.describe for details.\n",
      "    query_type : str\n",
      "        Query cache ('local') or Alyx database ('remote')\n",
      "    \n",
      "    Returns\n",
      "    -------\n",
      "    np.ndarray, pd.DataFrame\n",
      "        Slice of datasets table or numpy array if details is False\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(one.list_datasets)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "For detailed tutorials, guides and examples, [click here for the full ONE API documentation\n",
    "Website](https://int-brain-lab.github.io/ONE/)."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%md"
    }
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}